{"version":3,"sources":["Views/EventView.js","Controllers/FirebaseController.js","Controllers/EventController.js","Views/CalendarView.js","Views/HeaderView.js","Views/FooterView.js","Controllers/RoutineController.js","Views/PreWorkView.js","Views/WelcomeView.js","Views/ProfileView.js","Views/AlertView.js","Views/SignInView.js","Views/SignUpView.js","Controllers/SignUpController.js","Views/EditPreWorkView.js","App.js","serviceWorker.js","index.js"],"names":["EventView","console","log","this","props","currentStart","currentEnd","currentLocation","className","currentTitle","currentDate","currentDescription","onClick","e","editViewEventModalButton","removeCalendarEvent","content","displayEvent","Component","EditEventView","onChange","handleChange","id","placeholder","type","name","min","eventTime1","maxlength","rows","cols","updateCalendarEvent","displayEditEvent","storeEvent","event","route","key","firebase","database","ref","push","getKey","updateEvent","substring","update","removeEvent","remove","createEvent","CalendarView","handleEventClick","arg","eventEnd","start","end","eventStart","formatDate","hour","minute","formattedDate","month","year","day","weekday","setState","state","extendedProps","description","title","currentAttendees","attendees","location","eventModal","currentID","field","target","value","changes","calendarComponentRef","React","createRef","Date","bind","addCalendarEvent","calendarWeekends","calendarEvents","retrieveUserCalendar","rootPath","user","once","snapshot","info","val","userEvent","uid","test","Object","keys","map","parse","string","hash","length","i","charCodeAt","preventDefault","eventDate","allDay","eventTime2","eventDescription","eventLocation","calendarObject","eventName","toString","returnedID","concat","addEventModal","newArray","array","filter","deleteEvent","updateArray","t","editModal","repeatingForm","eventRepeating","repeatingStartDate","style","display","closeAddEventModalButton","required","closeViewEventModalButton","closeEditEventModalButton","defaultView","header","left","center","right","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","weekends","events","dateClick","handleDateClick","eventClick","addEventModalForm","calendar","displayCalendar","viewModal","editEventModal","viewEventModal","addEventModalButton","HeaderView","handleSignOut","errorMessage","auth","signOut","catch","err","message","window","reload","links","to","FooterView","createRoutineItem","PreWorkView","checklistItems","Map","retrievePreWorkItems","itemMap","set","preWorkItem","preWorkName","starred","itemID","addItemModal","editItemModal","closeEditItemModal","closeAddItemModal","addPreWorkItem","Array","from","entries","renderPreWorkList","displayPreWork","PreworkItem","WelcomeView","date","toDateString","intervalID","setInterval","tick","clearInterval","now","getHours","getMinutes","ampm","time","ProfileView","jobTitle","status","bio","officeHours","contact","rowspan","src","profilePhoto","alt","organization","profileReq","theme","colspan","profileOptional","onSubmit","handleSubmitJT","handleChangeJT","handleSubmitS","handleChangeS","handleSubmitBio","handleChangeBio","handleSubmitOH","handleChangeOH","preferredContacts","contactList","displayPreferredContacts","addToContacts","profileItem","displayProfile","AlertView","alert","handleReadAlert","handleDelete","SignInView","handleSignIn","signInWithEmailAndPassword","email","password","signInErr","SignUpView","retypePassword","createUserWithEmailAndPassword","then","currentUser","userObject","handleSignUp","EditPreWorkView","listInfo","idItem","editItemName","currentListItemID","newMap","item","get","delete","submitEditItem","removeItem","openAddItemModal","currentListItemName","App","authUnSubFunction","onAuthStateChanged","firebaseUser","exact","path","render","component","Boolean","hostname","match","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.fba7d15b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport class EventView extends Component {\r\n    componentDidMount() {\r\n        console.log(this.props)\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        console.log(this.props)\r\n    }\r\n\r\n    // Pre-Conditions: An event must be clicked on\r\n    // Post-Conditions: Display event information that\r\n    // was clicked\r\n    displayEvent() {\r\n        let currentStart = this.props.currentStart !== \"12:00 AM\" ? this.props.currentStart : \"\"\r\n        let currentEnd = this.props.currentEnd !== \"\" ? \" - \" + this.props.currentEnd : \"\"\r\n        let currentLocation = this.props.currentLocation !== \"\" ? this.props.currentLocation : \"No Location\"\r\n\r\n        let content = (\r\n            <div className=\"modalContent\">\r\n                <div>\r\n                    <h2>{this.props.currentTitle}</h2>\r\n                </div>\r\n                <div>\r\n                    <p>{this.props.currentDate}</p>\r\n                </div>\r\n                <div>\r\n                    <p>{currentStart}{currentEnd}</p>\r\n                </div>\r\n                <div><p><span>&#10022;</span>{currentLocation}</p></div>\r\n                <div>\r\n                    <p>{this.props.currentDescription}</p>\r\n                </div>\r\n                <button\r\n                    onClick={(e) => this.props.editViewEventModalButton(e)}\r\n                    className=\"editButton\">\r\n                    <span>&#9998;</span>\r\n                </button>\r\n                <button\r\n                    onClick={(e) => this.props.removeCalendarEvent(e)}\r\n                    className=\"removeButton\">\r\n                    <span>&#128465;</span>\r\n                </button>\r\n            </div>\r\n        )\r\n        return content\r\n    }\r\n\r\n\r\n    render() {\r\n        let content = this.displayEvent()\r\n\r\n        return (\r\n            <div>\r\n                {content}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport class EditEventView extends Component {\r\n    componentDidMount() {\r\n        console.log(this.props)\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        console.log(this.props)\r\n    }\r\n\r\n    displayEditEvent() {\r\n        let content = (\r\n            <div className=\"modalContent\">\r\n                <div>\r\n                    <input className=\"modalInput\"\r\n                        onChange={(e) => this.props.handleChange(e)}\r\n                        id=\"eventName\" placeholder=\"Event Name\" type=\"text\" name=\"eventName\"\r\n                         />\r\n                </div>\r\n                <div>\r\n                    <label className=\"modalLabel\"><b>Date</b></label>\r\n                    <input className=\"modalInput\"\r\n                        onChange={(e) => this.props.handleChange(e)}\r\n                        type=\"date\" name=\"eventDate\" \r\n                        />\r\n                </div>\r\n                <div id=\"timeRange\">\r\n                    <label className=\"modalLabel\"><b>Time Range</b></label>\r\n                    <input className=\"modalInputTime\"\r\n                        onChange={(e) => this.props.handleChange(e)}\r\n                        type=\"time\" name=\"eventTime1\" />\r\n                    <input className=\"modalInputTime\"\r\n                        onChange={(e) => this.props.handleChange(e)}\r\n                        min={this.props.eventTime1}\r\n                        type=\"time\" name=\"eventTime2\" />\r\n                </div>\r\n                <div>\r\n                    <label className=\"modalLabel\"><b>Location</b></label>\r\n                    <input className=\"modalInput\"\r\n                        onChange={(e) => this.props.handleChange(e)}\r\n                        placeholder=\"Event Location\" type=\"text\" name=\"eventLocation\" />\r\n                </div>\r\n                <div id=\"textAreaDescription\">\r\n                    <label className=\"modalLabel\"><b>Event Description</b></label>\r\n                    <textarea maxlength=\"500\" className=\"modalInput\" placeholder=\"Enter a description\"\r\n                        onChange={(e) => this.props.handleChange(e)}\r\n                        rows=\"4\" cols=\"50\"\r\n                        name=\"eventDescription\" />\r\n                </div>\r\n                <div>\r\n                    <label className=\"modalLabel\"><b>Attendees</b></label>\r\n                    <input className=\"modalInput\"\r\n                        onChange={(e) => this.props.handleChange(e)}\r\n                        placeholder=\"Search...\" type=\"textarea\" name=\"eventDescription\" />\r\n                </div>\r\n                <div>\r\n                    <label className=\"modalLabel\"><b>Reminders?</b></label>\r\n                    <input className=\"modalInput\"\r\n                        onChange={(e) => this.props.handleChange(e)}\r\n                        type=\"checkbox\" name=\"eventReminders\" /><span>Yes</span>\r\n                </div>\r\n                <div>\r\n                    <button \r\n                        onClick={(e) => this.props.updateCalendarEvent(e)}\r\n                        className=\"save\">\r\n                        <b>Save</b>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n        return content\r\n    }\r\n\r\n    render() {\r\n        let content = this.displayEditEvent()\r\n\r\n        return (\r\n            <div>\r\n                {content}\r\n            </div>\r\n        )\r\n    }\r\n}","import firebase from 'firebase/app';\r\n\r\n\r\n// Pre-Conditions: Information must have been sent\r\n// from a controller component\r\n// Requires: Event, information received as an object\r\n//           Route, path to send information to in Firebase\r\n// Post-Conditions: Succesfully stores\r\n// received information to Firebase\r\nexport function storeEvent(event, route) {\r\n    let rootPath = firebase.database().ref(route)\r\n    let key = rootPath.push(event).getKey()\r\n    console.log(key)\r\n    return key\r\n}\r\n\r\n// Pre-Conditions: Information must be requested\r\n// from a controller component\r\n// Requires: Event, information received as an object\r\n// Post-Conditions: Returns requested information\r\n// from Firebase back to relevant controller\r\nexport function sendEvent(event, route) {\r\n    let rootPath = firebase.database().ref(route)\r\n    \r\n    var info\r\n\r\n    rootPath.once(\"value\", (snapshot) => {\r\n        info = snapshot.val()\r\n    })\r\n\r\n    return info\r\n}\r\n\r\n// Pre-Conditions: Information must be sent from a controller\r\n// component along with the route with an object to update\r\n// Post-Conditions: Successfully updates proper component\r\n// in Firebase Database\r\nexport function updateEvent(event, route) {\r\n    if (route.substring(0, 7) === \"routine\") {\r\n        firebase.database().ref(route).update({\r\n            name: event\r\n        })\r\n    } else {\r\n        let rootPath = firebase.database().ref(route)\r\n        rootPath.update({\r\n            event\r\n        })\r\n    }\r\n}\r\n\r\n// Pre-conditions: Information must be request\r\n// from a controller component to remove\r\n// Requires: Event, information received as an object\r\n// Post-Conditions: Returns removed event information\r\n// from Fireback back to relevant controller\r\nexport function removeEvent(route) {\r\n    let rootPath = firebase.database().ref(route)\r\n    rootPath.remove()\r\n}","import { sendEvent, updateEvent, storeEvent, removeEvent } from './FirebaseController.js'\r\n\r\n// Pre-Conditions: Information must have been requested\r\n// from a controller and information must be in object form\r\n// Post-Conditions: Succesfully retrives event and\r\n// stores it in the state\r\nexport function retrieveEvent(id) {\r\n    // let eventObject = (event)\r\n\r\n    let info = sendEvent(\"events/\" + id)\r\n\r\n    return info\r\n}\r\n\r\n// Pre-Conditions: Edit button must\r\n// be clicked on for an existing event\r\n// Post-Conditions: Displays any changes made\r\n// to event \r\nexport function editEvent(event, id) {\r\n    let eventObject = (event)\r\n\r\n    updateEvent(eventObject, \"events/\" + id)\r\n}\r\n\r\n// Pre-Conditions: Required information must be\r\n// be filled before creating event\r\n// Post-Conditions: Succesfully creates an event\r\n// with inputted information and sends information\r\n// to Firebase controller\r\nexport function createEvent(event, id) {\r\n    let eventObject = (event)\r\n\r\n    let returnedID = storeEvent(eventObject, \"events/\" + id)\r\n    return returnedID\r\n}\r\n\r\n// Pre-Conditions: Delete button must\r\n// be clicked\r\n// Post-Conditions: Succesfully sends information\r\n// to remove from Firebase and to CalendarView\r\nexport function deleteEvent(array, event, id) {\r\n    let eventObject = (event)\r\n    var newArray\r\n\r\n    if (array.length <= 1) {\r\n        newArray = []\r\n    } else {\r\n        newArray = array.filter(key => key.id != event)\r\n    }\r\n\r\n    removeEvent(\"events/\" + id + \"/\" + event)\r\n    return newArray\r\n}","import React, { Component } from 'react';\r\nimport firebase from 'firebase/app';\r\n\r\n\r\n// Views\r\nimport { EventView, EditEventView } from './EventView.js'\r\n\r\n// Controllers\r\nimport { retrieveEvent, createEvent, editEvent, deleteEvent } from '../Controllers/EventController.js'\r\n\r\nimport FullCalendar from '@fullcalendar/react'\r\nimport { formatDate } from '@fullcalendar/core'\r\nimport dayGridPlugin from '@fullcalendar/daygrid'\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\"; // needed for dayClick\r\n\r\nimport '../main.css'\r\nimport \"@fullcalendar/core/main.css\";\r\nimport \"@fullcalendar/daygrid/main.css\";\r\nimport \"@fullcalendar/timegrid/main.css\";\r\n\r\nexport default class CalendarView extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.calendarComponentRef = React.createRef();\r\n        let test = new Date('June 2, 2020')\r\n        let test2 = new Date('June 3, 2020')\r\n\r\n        this.editViewEventModalButton = this.editViewEventModalButton.bind(this)\r\n        this.removeCalendarEvent = this.removeCalendarEvent.bind(this)\r\n        this.addCalendarEvent = this.addCalendarEvent.bind(this)\r\n        this.updateCalendarEvent = this.updateCalendarEvent.bind(this)\r\n\r\n        this.state = {\r\n            calendarWeekends: true,\r\n            calendarEvents: [\r\n                // // initial event data\r\n                // { title: \"Event Now\", start: new Date(\"2020-06-03\" + 'T00:00:00'), allDay: true },\r\n                // { title: \"Test Date\", start: test, description: \"testtest\", yuh: \"hell yeah!\", attendees: [\"test1\",\"test2\"]}\r\n            ]\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"Mounted\")\r\n        console.log(this.props)\r\n        this.retrieveUserCalendar()\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        console.log(this.state)\r\n    }\r\n\r\n    // Initliazation Functions\r\n\r\n    // Pre-Conditions: User switches to Calendar tab and has calendar events\r\n    // Post-Conditions: Loads calendar information into state\r\n    retrieveUserCalendar() {\r\n        let rootPath = firebase.database().ref('events')\r\n\r\n        if (this.props.user) {\r\n            rootPath.once('value', (snapshot) => {\r\n                let info = snapshot.val()\r\n    \r\n                if (info) {\r\n                    console.log(info)\r\n    \r\n                    let userEvent = info[this.props.user.uid]\r\n    \r\n                    console.log(userEvent)\r\n                    let test = Object.keys(userEvent).map((key) => {\r\n                        console.log(userEvent[key].start)\r\n                        userEvent[key].start = Date.parse(userEvent[key].start)\r\n                        userEvent[key].end = Date.parse(userEvent[key].end)\r\n                        userEvent[key].id = key\r\n                        return userEvent[key]\r\n                    })\r\n                    this.setState((state) => {\r\n                        state.calendarEvents = test\r\n                        return state\r\n                    })\r\n                }\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    // Helper Functions\r\n\r\n    // Pre-Conditions: String must have been\r\n    // sent to hash\r\n    // Post-Condition: Returns string as a hashed\r\n    // string\r\n    stringToHash(string) {  \r\n        var hash = 0; \r\n          \r\n        if (string.length == 0) return hash; \r\n          \r\n        for (let i = 0; i < string.length; i++) { \r\n            let char = string.charCodeAt(i); \r\n            hash = ((hash << 5) - hash) + char; \r\n            hash = hash & hash; \r\n        } \r\n          \r\n        return hash; \r\n    } \r\n\r\n\r\n    // Controller Functions\r\n\r\n    // Pre-Conditions: \"Save\" button is clicked with all required\r\n    // fields filled out\r\n    // Post-Conditions: Creates a calendar event and adds it to\r\n    // to the calendar client-side and sends information to Firebase\r\n    // to store/add\r\n    addCalendarEvent(e) {\r\n        e.preventDefault()\r\n        let eventTime1 = this.state.eventTime1 ? this.state.eventTime1 : \"\"\r\n        \r\n        let start = new Date(this.state.eventDate + 'T00:00:00')\r\n        // let start = new Date(this.state.eventDate)\r\n        let end = \"\"\r\n        let allDay = true\r\n\r\n        if (eventTime1 !== \"\") {\r\n            start = new Date(this.state.eventDate + ' ' + this.state.eventTime1)\r\n            allDay = false\r\n        }\r\n\r\n        // Transform \r\n        if (this.state.eventTime2) {\r\n            end = new Date(this.state.eventDate + ' ' + this.state.eventTime2)\r\n        }\r\n\r\n        let description = this.state.eventDescription ? this.state.eventDescription : \"\"\r\n        let location = this.state.eventLocation ? this.state.eventLocation : \"\"\r\n\r\n        // Represents a single event object to add to Firebase\r\n        let calendarObject = {\r\n            title: this.state.eventName,\r\n            start: start.toString(),\r\n            end: end.toString(),\r\n            description: description,\r\n            allDay: allDay,\r\n            location: location\r\n        }\r\n\r\n        // // Call controller\r\n        let returnedID = createEvent(calendarObject, this.props.user.uid)\r\n\r\n        // Add \r\n        this.setState({\r\n            calendarEvents: this.state.calendarEvents.concat({\r\n                title: this.state.eventName,\r\n                start: start,\r\n                end: end,\r\n                description: description,\r\n                location: location,\r\n                id: returnedID,\r\n                allDay: allDay\r\n            }),\r\n            addEventModal: \"none\"\r\n        })\r\n\r\n        // // Call controller\r\n        createEvent(calendarObject, this.props.user.uid)\r\n    }\r\n\r\n    // Pre-Conditions: User clicks on edit button\r\n    // Post-Conditions: Updates calendar and sends updated information\r\n    // to Firebase\r\n    updateCalendarEvent(e) {\r\n        e.preventDefault()\r\n        // Need to edit Firebase value\r\n        // Remove this value from calendar object\r\n        // deleteEvent(calendar, this.state.currentID, this.props.user.uid)\r\n        // this.removeCalendarEvent(e)\r\n        // this.addCalendarEvent(e)\r\n        let calendarArray = this.state.calendarEvents\r\n        // let newArray = deleteEvent(calendarArray, this.state.currentID, this.props.user.uid)\r\n        console.log(this.state)\r\n        // Re-add updated information\r\n    }\r\n\r\n    // Pre-Conditions: User clicks on remove button\r\n    // Post-Conditions: Updates calendar to remove event\r\n    // and removes information from Firebase\r\n    removeCalendarEvent(e) {\r\n        e.preventDefault()\r\n        let calendarArray = this.state.calendarEvents\r\n        let newArray = deleteEvent(calendarArray, this.state.currentID, this.props.user.uid)\r\n        this.updateArray(newArray)\r\n    }\r\n\r\n    updateArray(t) {\r\n        this.setState((state) => {\r\n            state.calendarEvents = t\r\n            state.eventModal = \"none\"\r\n            return state\r\n        })\r\n    }\r\n\r\n    // Event Actions\r\n\r\n    handleEventClick = arg => {\r\n        let eventEnd = \"\"\r\n\r\n        console.log(arg.event.start)\r\n        console.log(arg.event.end)\r\n\r\n        let eventStart = formatDate(arg.event.start, {\r\n            hour: 'numeric',\r\n            minute: '2-digit'\r\n        })\r\n\r\n        if (arg.event.end) {\r\n            eventEnd = formatDate(arg.event.end, {\r\n                hour: 'numeric',\r\n                minute: '2-digit'\r\n            })\r\n            console.log(eventEnd)\r\n        }\r\n\r\n        let formattedDate = formatDate(arg.event.start, {\r\n            month: \"long\",\r\n            year: 'numeric',\r\n            day: 'numeric',\r\n            weekday: 'long'\r\n        })\r\n\r\n        console.log(formattedDate)\r\n\r\n        this.setState((state) => {\r\n            state.currentDescription = arg.event.extendedProps.description\r\n            state.currentTitle = arg.event.title\r\n            state.currentAttendees = arg.event.extendedProps.attendees\r\n            state.currentLocation = arg.event.extendedProps.location\r\n            state.currentDate = formattedDate\r\n            state.currentStart = eventStart\r\n            state.currentEnd = eventEnd\r\n            state.eventModal = \"block\"\r\n            state.currentID = arg.event.id\r\n            return state\r\n        })\r\n    }\r\n\r\n    // handleDateClick = arg => {\r\n    //     console.log(arg)\r\n    //     // if (window.confirm(\"Would you like to add an event to \" + arg.dateStr + \" ?\")) {\r\n    //     //   this.setState({\r\n    //     //     // add new event data\r\n    //     //     calendarEvents: this.state.calendarEvents.concat({\r\n    //     //       // creates a new array\r\n    //     //       title: \"New Event\",\r\n    //     //       start: arg.date,\r\n    //     //       allDay: arg.allDay\r\n    //     //     })\r\n    //     //   });\r\n    //     // }\r\n    //   };\r\n\r\n    // Pre-Conditions: Event must have been sent\r\n    // Post-Conditions: State is updated with event changes\r\n    handleChange = (event) => {\r\n        let field = event.target.name\r\n        let value = event.target.value\r\n\r\n        let changes = {}\r\n\r\n        changes[field] = value\r\n        this.setState(changes)\r\n    }\r\n\r\n    // Pre-Conditions: Add button must have been clicked on\r\n    // Post-Conditions: Displays modal box for adding new event\r\n    addEventModalButton(e) {\r\n        e.preventDefault()\r\n        this.setState((state) => {\r\n            state.addEventModal = \"block\"\r\n            return state\r\n        })\r\n    }\r\n\r\n    editViewEventModalButton(e) {\r\n        e.preventDefault()\r\n        this.setState((state) => {\r\n            state.eventModal = \"none\"\r\n            state.editModal = \"block;\"\r\n            return state\r\n        })\r\n    }\r\n\r\n    // Pre-Conditions: Modal box for adding event must be visible\r\n    // and close button must have been clicked\r\n    // Post-Conditions: Modal box is no longer shown\r\n    closeAddEventModalButton(e) {\r\n        e.preventDefault()\r\n        this.setState((state) => {\r\n            state.addEventModal = \"none\"\r\n            return state\r\n        })\r\n    }\r\n\r\n    closeViewEventModalButton(e) {\r\n        e.preventDefault()\r\n        this.setState((state) => {\r\n            state.eventModal = \"none\"\r\n            return state\r\n        })\r\n    }\r\n\r\n    closeEditEventModalButton(e) {\r\n        e.preventDefault()\r\n        this.setState((state) => {\r\n            state.editModal = \"none\"\r\n            return state\r\n        })\r\n    }\r\n\r\n    // Forms\r\n\r\n    // Pre-Conditions: + Add Event Button must have been clicked\r\n    // Post-Conditions: Returns modal form for adding event\r\n    addEventModalForm() {\r\n        let repeatingForm = null\r\n\r\n        if (this.state.eventRepeating === \"on\") {\r\n            console.log(\"Yes!\")\r\n            repeatingForm = (\r\n                <div className=\"repeatingForm\">\r\n                    <div>\r\n                        <label className=\"repeatingLabel\">Daily</label>\r\n                        <input className=\"repeatingInput\"\r\n                            onChange={(e) => this.handleChange(e)}\r\n                            type=\"checkbox\" name=\"repeatingDaily\" />\r\n                        <label className=\"repeatingLabel\">Weekly</label>\r\n                        <input className=\"repeatingInput\"\r\n                            onChange={(e) => this.handleChange(e)}\r\n                            type=\"checkbox\" name=\"repeatingWeekly\" />\r\n                        <label className=\"repeatingLabel\">Monthly</label>\r\n                        <input className=\"repeatingInput\"\r\n                            onChange={(e) => this.handleChange(e)}\r\n                            type=\"checkbox\" name=\"repeatingMonthly\" />\r\n                    </div>\r\n                    <div>\r\n                        <div>\r\n                            <label className=\"repeatingLabel\">Start Date</label>\r\n                            <input className=\"repeatingInput\" \r\n                            onChange={(e) => this.handleChange(e)}\r\n                            type=\"date\" name=\"repeatingStartDate\"/>\r\n                        </div>\r\n                        <div>\r\n                        <label className=\"repeatingLabel\">End Date</label>\r\n                        <input className=\"repeatingInput\" type=\"date\"\r\n                            onChange={(e) => this.handleChange(e)} \r\n                            min={this.state.repeatingStartDate} name=\"repeatingEndDate\"/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            repeatingForm = null\r\n        }\r\n\r\n        let form = (\r\n            <div className=\"modalBox\"\r\n                style={{ display: this.state.addEventModal }}>\r\n                <div>\r\n                    <form className=\"modalForm\">\r\n                        <button className=\"closeModal\"\r\n                            onClick={(e) => this.closeAddEventModalButton(e)}>\r\n                            X\r\n                    </button>\r\n                        <div className=\"modalContent\">\r\n                            <div>\r\n                                <input className=\"modalInput\" required\r\n                                    onChange={(e) => this.handleChange(e)}\r\n                                    id=\"eventName\" placeholder=\"Event Name\" type=\"text\" name=\"eventName\" />\r\n                            </div>\r\n                            <div>\r\n                                <label className=\"modalLabel\"><b>Date</b></label>\r\n                                <input className=\"modalInput\" required\r\n                                    onChange={(e) => this.handleChange(e)}\r\n                                    type=\"date\" name=\"eventDate\" />\r\n                            </div>\r\n                            <div id=\"timeRange\">\r\n                                <label className=\"modalLabel\"><b>Time Range</b></label>\r\n                                <input className=\"modalInputTime\"\r\n                                    onChange={(e) => this.handleChange(e)}\r\n                                    type=\"time\" name=\"eventTime1\" />\r\n                                <input className=\"modalInputTime\"\r\n                                    onChange={(e) => this.handleChange(e)}\r\n                                    min={this.state.eventTime1}\r\n                                    type=\"time\" name=\"eventTime2\" />\r\n                            </div>\r\n                            <div>\r\n                                <label className=\"modalLabel\"><b>Location</b></label>\r\n                                <input className=\"modalInput\"\r\n                                    onChange={(e) => this.handleChange(e)}\r\n                                    placeholder=\"Event Location\" type=\"text\" name=\"eventLocation\" />\r\n                            </div>\r\n                            <div id=\"textAreaDescription\">\r\n                                <label className=\"modalLabel\"><b>Event Description</b></label>\r\n                                <textarea maxlength=\"500\" className=\"modalInput\" placeholder=\"Enter a description\"\r\n                                    onChange={(e) => this.handleChange(e)}\r\n                                    rows=\"4\" cols=\"50\"\r\n                                    name=\"eventDescription\" />\r\n                            </div>\r\n                            <div>\r\n                                <label className=\"modalLabel\"><b>Attendees</b></label>\r\n                                <input className=\"modalInput\"\r\n                                    onChange={(e) => this.handleChange(e)}\r\n                                    placeholder=\"Search...\" type=\"textarea\" name=\"eventDescription\" />\r\n                            </div>\r\n                            <div>\r\n                                <label className=\"modalLabel\"><b>Reminders?</b></label>\r\n                                <input className=\"modalInput\"\r\n                                    onChange={(e) => this.handleChange(e)}\r\n                                    type=\"checkbox\" name=\"eventReminders\" /><span>Yes</span>\r\n                            </div>\r\n                            <div>\r\n                                <label className=\"modalLabel\"><b>Repeating Events?</b></label>\r\n                                <input className=\"modalInput\"\r\n                                    onChange={(e) => this.handleChange(e)}\r\n                                    type=\"checkbox\" name=\"eventRepeating\" /><span>Yes</span>\r\n                                {repeatingForm}\r\n                            </div>\r\n                            <div>\r\n                                <button \r\n                                    onClick={(e) => this.addCalendarEvent(e)}\r\n                                    className=\"save\">\r\n                                    <b>Save</b>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n        return form\r\n    }\r\n\r\n    viewEventModal() {\r\n        let viewModal = (\r\n            <div \r\n                className=\"modalBox\" \r\n                style={{ display: this.state.eventModal }}>\r\n                <div>\r\n                    <form\r\n                        className=\"modalForm\">\r\n                            <button\r\n                                className=\"closeModal\"\r\n                                onClick={(e) => this.closeViewEventModalButton(e)}>\r\n                                    X\r\n                            </button>\r\n                        <EventView\r\n                            {...this.state}\r\n                            editViewEventModalButton = {this.editViewEventModalButton}\r\n                            removeCalendarEvent = {this.removeCalendarEvent}\r\n                            // currentDescription={this.state.currentDescription} \r\n                            // currentTitle = {this.state.currentTitle}\r\n                            // currentAttendees = {this.state.currentAttendees}\r\n                            // currentStart = {this.state.currentStart}\r\n                            // currentEnd = {this.state.currentEnd} \r\n                        />\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n        return viewModal\r\n    }\r\n\r\n    editEventModal() {\r\n        let editModal = (\r\n            <div\r\n                className=\"modalBox\"\r\n                style={{display: this.state.editModal}}>\r\n                <div>\r\n                    <form\r\n                        className=\"modalForm\">\r\n                        <button\r\n                            className=\"closeModal\"\r\n                            onClick={(e) => this.closeEditEventModalButton(e)}>\r\n                                X\r\n                        </button>\r\n                        <EditEventView \r\n                            updateCalendarEvent = {this.updateCalendarEvent}\r\n                            handleChange = {this.handleChange}\r\n                            currentDescription={this.state.currentDescription} \r\n                            currentTitle = {this.state.currentTitle}\r\n                            currentAttendees = {this.state.currentAttendees}\r\n                            currentStart = {this.state.currentStart}\r\n                            currentEnd = {this.state.currentEnd} \r\n                        />\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n        return editModal\r\n    }\r\n\r\n    // Pre-Conditions: CalendarView is loaded\r\n    // Post-Conditions: Displays calendar information\r\n    // contained with event information, will default\r\n    // to current week view\r\n    displayCalendar() {\r\n        let content = (\r\n            <div className=\"calendar\">\r\n            <FullCalendar defaultView=\"dayGridMonth\"\r\n                header={{\r\n                    left: \"prev,next today\",\r\n                    center: \"title\",\r\n                    right: \"dayGridMonth,timeGridWeek,timeGridDay,listWeek\"\r\n                }}\r\n                plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n                ref={this.calendarComponentRef}\r\n                weekends={this.state.calendarWeekends}\r\n                events={this.state.calendarEvents}\r\n                dateClick={this.handleDateClick}\r\n                eventClick={this.handleEventClick}\r\n            />\r\n        </div>\r\n        )\r\n        return content\r\n    }\r\n\r\n    render() {\r\n        const addEventModalForm = this.addEventModalForm()\r\n        const calendar = this.displayCalendar()\r\n\r\n        let viewModal = null\r\n\r\n        if (this.state.editModal === \"none\" || !this.state.editModal) {\r\n            viewModal = this.viewEventModal()\r\n        } else {\r\n            viewModal = this.editEventModal()\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"calendarButtons\">\r\n                    <button\r\n                        className=\"addItemButton\"\r\n                        onClick={(e) => this.addEventModalButton(e)}>\r\n                        <span>&#43;</span> Add Event\r\n                    </button>\r\n                </div>\r\n                <div>\r\n                    {calendar}\r\n                </div>\r\n                <div>\r\n                    {addEventModalForm}\r\n                    {viewModal}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Route, Switch, Redirect, BrowserRouter, NavLink} from 'react-router-dom';\r\nimport firebase from 'firebase/app';\r\n\r\nimport CalendarView from './CalendarView';\r\n\r\n\r\nexport default class HeaderView extends Component {\r\n    // Pre-Conditions: HeaderView is loaded\r\n    // Post-Conditions: Displays DailyGrind branding information\r\n    displayLogo() {\r\n    }\r\n\r\n    // Pre-Conditions: HeaderView is loaded\r\n    // Post-Conditions: Displays navbar\r\n    displayNavbar() {\r\n    }\r\n\r\n    handleSignOut = () => {\r\n        this.setState({ errorMessage: null });\r\n        firebase.auth().signOut()\r\n          .catch((err) => {\r\n            this.setState({ errorMessage: err.message })\r\n          })\r\n        window.location.reload()\r\n      }\r\n\r\n    render() {\r\n        let links = null;\r\n\r\n        if(!this.props.user){\r\n            links = (\r\n                <ul>\r\n                    <li><NavLink to='/signin'>Sign-In</NavLink></li>\r\n                    {/* <li><NavLink to='/settings'>Settings</NavLink></li>\r\n                    <li><NavLink to='alerts'>Alerts</NavLink></li>\r\n                    <li><NavLink to='todo'>To-Do</NavLink></li>\r\n                    <li><NavLink to='/prework'>Pre-Work</NavLink></li>\r\n                    <li><NavLink to='breaks'>Breaks</NavLink></li>\r\n                    <li><NavLink to=\"/calendar\">Calendar</NavLink></li> */}\r\n                </ul>\r\n            )\r\n        } else {\r\n            links = (\r\n                <ul>\r\n                    <li><button id=\"headerSignOut\" onClick={(e) => this.handleSignOut(e)}>Sign Out</button></li>\r\n                    {/* <li><NavLink to='/profile'>Profile</NavLink></li>\r\n                    <li><NavLink to='/settings'>Settings</NavLink></li>\r\n                    <li><NavLink to='alerts'>Alerts</NavLink></li>\r\n                    <li><NavLink to='todo'>To-Do</NavLink></li> */}\r\n                    <li><NavLink to='/prework'>Pre-Work</NavLink></li>\r\n                    {/* <li><NavLink to='breaks'>Breaks</NavLink></li> */}\r\n                    <li><NavLink to='/calendar'>Calendar</NavLink></li>\r\n                </ul>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className=\"navBar\">  \r\n                {/* <BrowserRouter> */}\r\n                    <p className=\"logo\"><NavLink to='/'>Daily Grind</NavLink></p> \r\n                    {links}\r\n                {/* </BrowserRouter> */}\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class FooterView extends Component {\r\n    // Pre-Conditions: FooterView is loaded\r\n    // Post-Conditions: Displays contact information of team\r\n    displayFooter() {\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>  \r\n                <p>Created for INFO 442 Spring 2020</p>    \r\n            </div>\r\n        )\r\n    }\r\n}","import { sendEvent, updateEvent, storeEvent, removeEvent } from './FirebaseController.js'\r\n\r\n// Pre-Conditions: Information must have been \r\n// requested from FirebaseController\r\n// Post-Conditions: Succesfully retrieves event\r\n// and returns a routine item\r\nexport function retrieveRoutineItem(id) {\r\n    let info = sendEvent(\"routine/\" + id)\r\n    return info\r\n}\r\n\r\n// Pre-Conditions: Required information must\r\n// be filled before creating routine item\r\n// Post-Conditions: Succesfully creates\r\n// a routine item and sends information to\r\n// ToDoView, PreWorkView, and FirebaseController\r\nexport function createRoutineItem(event, id) {\r\n    let eventObject = event\r\n    let returnedID = storeEvent(eventObject, \"routine/\" + id)\r\n    return returnedID\r\n}\r\n\r\n// Pre-Conditions: displayEditPreWork must have been called\r\n// Post-Conditions: Sends any changes made to PreWorView\r\n// and ToDoView\r\nexport function editRoutineItem(event, id, idItem) {\r\n    let eventObject = event\r\n    \r\n    // Do anything we need to do to the event here\r\n\r\n    updateEvent(eventObject, \"routine/\" + id + \"/\" + idItem)\r\n}\r\n\r\n// Pre-Conditions: Delete button for\r\n// routine list item must be clicked.\r\n// Post-Conditions: Successfully sends information\r\n// to remove from Firebase to FirebaseController\r\n// and to ToDoView & PreWorkView\r\nexport function removeRoutineItem(event, id) {\r\n    let eventObject = event\r\n\r\n    // Do anything we need to do to the event here\r\n\r\n    removeEvent(\"routine/\" + event + \"/\" + id)\r\n}","import React, { Component } from 'react';\r\nimport { retrieveRoutineItem, createRoutineItem, editRoutineItem, removeRoutineItem } from '../Controllers/RoutineController'\r\nimport firebase from 'firebase/app';\r\n\r\nexport default class PreWorkView extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            checklistItems: new Map()\r\n            // user: this.props.user.uid\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.retrievePreWorkItems()\r\n    }\r\n\r\n    componentDidUpdate() {\r\n    }\r\n\r\n    // Mount Functions\r\n\r\n    retrievePreWorkItems() {\r\n        let rootPath = firebase.database().ref('routine')\r\n\r\n        rootPath.once('value', (snapshot) => {\r\n            let info = snapshot.val()\r\n            console.log(info)\r\n            if (info) {\r\n                console.log(info[this.props.user.uid])\r\n                // let keys = Object.keys(info)\r\n                let itemMap = new Map()\r\n\r\n                let keys = Object.keys(info[this.props.user.uid])\r\n                \r\n                keys.map((key) => {\r\n                    itemMap.set(key, info[this.props.user.uid][key])\r\n                })\r\n                this.setState((state) => {\r\n                    state.checklistItems = itemMap\r\n                    return state\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    // Event Handlers\r\n\r\n    addPreWorkItem(e) {\r\n        e.preventDefault()\r\n        let checklistItems = this.state.checklistItems\r\n\r\n        let preWorkItem = {\r\n            name: this.state.preWorkName,\r\n            starred: false\r\n        }\r\n\r\n        let itemID = createRoutineItem(preWorkItem, this.props.user.uid)\r\n\r\n        checklistItems.set(itemID, preWorkItem)\r\n\r\n        this.setState((state) => {\r\n            this.state.checklistItems = checklistItems\r\n            return state\r\n        })\r\n    }\r\n\r\n    openAddItemModal(e) {\r\n        e.preventDefault()\r\n        this.setState((state) => {\r\n            state.addItemModal = \"block\"\r\n            return state\r\n        })\r\n    }\r\n\r\n    openEditItemModal(e) {\r\n        e.preventDefault()\r\n        this.setState((state) => {\r\n            state.editItemModal = \"block\"\r\n            return state\r\n        })\r\n    }\r\n\r\n    closeAddItemModal(e) {\r\n        e.preventDefault()\r\n        this.setState((state) => {\r\n            state.preWorkName = \"\"\r\n            state.addItemModal = \"none\"\r\n            return state\r\n        })\r\n    }\r\n\r\n    // Pre-Conditions: Event must have been sent\r\n    // Post-Conditions: State is updated with event changes\r\n    handleChange = (event) => {\r\n        let field = event.target.name\r\n        let value = event.target.value\r\n\r\n        let changes = {}\r\n\r\n        changes[field] = value\r\n        this.setState(changes)\r\n    }\r\n\r\n    // Display Functions\r\n\r\n    editItemModal() {\r\n        let content = (\r\n            <div className=\"modalBox\"\r\n                style={{display: this.state.editItemModal}}>\r\n                <div>\r\n                    <form className=\"modalForm\">\r\n                        <button\r\n                            onClick={(e) => this.closeEditItemModal(e)}\r\n                            className=\"closeModal\">\r\n                                X\r\n                            </button>\r\n                        <div className=\"modalContent\">\r\n                            <div>\r\n                                <input className=\"modalInput\">\r\n\r\n                                </input>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n        return content\r\n    }\r\n\r\n    addItemModal() {\r\n        let content = (\r\n            <div className=\"modalBox\"\r\n                style={{display: this.state.addItemModal}}>\r\n                <div>\r\n                    <form className=\"modalForm\">\r\n                        <button\r\n                            onClick={(e) => this.closeAddItemModal(e)} \r\n                            className=\"closeModal\">\r\n                            X\r\n                        </button>\r\n                        <div className=\"modalContent\">\r\n                            <div>\r\n                                <input className=\"modalInput\" required\r\n                                    onChange={(e) => this.handleChange(e)}\r\n                                    placeholder=\"PreWork Name\"\r\n                                    type=\"text\"\r\n                                    name=\"preWorkName\"\r\n                                />\r\n                            </div>\r\n                            <button\r\n                                onClick={(e) => this.addPreWorkItem(e)}>\r\n                                Add\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n        return content\r\n    }\r\n\r\n    renderPreWorkList() {\r\n        const list = Array.from(this.state.checklistItems.entries()).map((key) => {\r\n            return <PreworkItem\r\n                id={key[0]}\r\n                name={key[1].name}\r\n                starred={key[1].starred}/>\r\n        })\r\n        return list\r\n    }\r\n\r\n    // Pre-Conditions: PreWorkView is loaded\r\n    // Post-Conditions: Displays pre-work routine\r\n    displayPreWork() {\r\n        const checklistItems = this.renderPreWorkList()\r\n\r\n        let content = (\r\n            <div>\r\n                <div>\r\n                    <div className=\"preWorkTitleElements\">\r\n                        <div>\r\n                        <h2>\r\n                            Pre-Work Items\r\n                        </h2>\r\n                        </div>\r\n                        <div>\r\n                        {/* <button className=\"addItemButton\"\r\n                            onClick={(e) => this.openAddItemModal(e)}>\r\n                            <span>&#43;</span> Add Item\r\n                        </button> */}\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div>\r\n                        <ul className=\"listGroup\">\r\n                            {checklistItems}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n        return content\r\n    }\r\n\r\n    // Pre-Conditions: User has clicked \"edit\" button\r\n    // Post-Conditions: Display edit pop-up & send \r\n    // filled in information Routine Controller\r\n    displayEditPreWork() {\r\n\r\n    }\r\n\r\n    render() {\r\n        let displayPreWork = this.displayPreWork()\r\n        let addItemModal = this.addItemModal()\r\n\r\n        return (\r\n            <div>\r\n                <div>\r\n                    {displayPreWork}\r\n                </div>\r\n                <div>\r\n                    {addItemModal}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass PreworkItem extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        let starred = this.props.starred ? \r\n        <button \r\n            // onClick={(e) => this.}\r\n            className=\"starButton\"><span>&#9733;</span></button> : <button className=\"starButton\"><span>&#9734;</span></button>\r\n\r\n        return (\r\n            <div>\r\n                <li className=\"listpreWork\">{starred}<button className=\"listButton\">{this.props.name}</button></li>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport PreWorkView from './PreWorkView';\r\n\r\n\r\nexport default class WelcomeView extends Component {\r\n\r\n    // Pre-Conditions: WelcomeView is loaded\r\n    // Post-Conditions: Displays current date and day of the week\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          date: new Date().toDateString()\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.intervalID = setInterval(\r\n            () => this.tick(),\r\n            1000\r\n        );  \r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.intervalID);\r\n    }\r\n\r\n    tick() {\r\n        var now = new Date();\r\n        var hour = now.getHours();\r\n        var minute = now.getMinutes();\r\n        var ampm = hour >= 12 ? 'PM' : 'AM';\r\n        hour = hour % 12;\r\n        hour = hour ? hour : 12; // the hour '0' should be '12'\r\n        minute = minute < 10 ? '0'+minute : minute;\r\n        this.setState({\r\n            time: hour + \":\" + minute + \" \" + ampm \r\n        });\r\n    }\r\n\r\n    render() {\r\n        let content = null\r\n\r\n        if (this.props.user) {\r\n            content = (\r\n                <div>\r\n <div className=\"welcomeText\">\r\n                <h2>Today is</h2>\r\n                <h1>\r\n                    {this.state.date}\r\n                </h1>\r\n                <h2>{this.state.time}</h2>\r\n            </div>\r\n            <div className=\"preWorkView\">\r\n                <PreWorkView\r\n                    {...this.props}/>\r\n            </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            content = (\r\n                <div>\r\n                                    <div className=\"welcomeText\">\r\n                    <h2>Today is</h2>\r\n                    <h1>\r\n                        {this.state.date}\r\n                    </h1>\r\n                    <h2>{this.state.time}</h2>\r\n                </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className=\"welcome\">\r\n                {content}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport default class ProfileView extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    \r\n    handleChangeJT(event) {\r\n        this.setState({jobTitle: event.target.jobTitle});\r\n    }\r\n\r\n    handleSubmitJT(event) {\r\n        event.preventDefault();\r\n        this.handleChange(this.state.jobTitle);\r\n    }\r\n\r\n    handleChangeS(event) {\r\n        this.setState({status: event.target.status});\r\n    }\r\n\r\n    handleSubmitS(event) {\r\n        event.preventDefault();\r\n        this.handleChange(this.state.status);\r\n    }\r\n\r\n    handleChangeBio(event) {\r\n        this.setState({bio: event.target.bio});\r\n    }\r\n\r\n    handleSubmitBio(event) {\r\n        event.preventDefault();\r\n        this.handleChange(this.state.bio);\r\n    }\r\n\r\n    handleChangeOH(event) {\r\n        this.setState({officeHours: event.target.officeHours});\r\n    }\r\n\r\n    handleSubmitOH(event) {\r\n        event.preventDefault();\r\n        this.handleChange(this.state.officeHours);\r\n    }\r\n\r\n    displayPreferredContacts(contact) {\r\n        return (\r\n            <div>\r\n                <table>\r\n                <tr>\r\n                        <td rowspan=\"2\"><img src={contact.profilePhoto} alt=\"User's Profile Photo\" /></td>\r\n                        <td>{contact.name}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>{contact.organization}</td>\r\n                    </tr>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    // Dialogue to add users to preferred contacts\r\n    addToContacts() {\r\n\r\n    }\r\n    \r\n    // Pre-Conditions: ProfileView is loaded, user is logged in.\r\n    // Post-Conditions: Displays user's profile\r\n    displayProfile() {\r\n        let profile = null;\r\n        let profileReq = (\r\n            <div>\r\n                <table className=\"profile\">\r\n                    <tr>\r\n                        <td rowspan=\"2\"><img src={this.props.user.profilePhoto} alt=\"User's Profile Photo\" /></td>\r\n                        <td>{this.props.user.name}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>{this.props.user.organization}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>{this.props.user.theme}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td colspan=\"2\" style=\"text-allign: right\"><span className=\"input-group-btn\">\r\n                            <Link to=\"/settings\">Edit</Link>\r\n                        </span></td>\r\n                    </tr>\r\n                </table>\r\n            </div>\r\n        )\r\n        let profileOptional = null;\r\n        //Displaying job title\r\n        if(this.props.user.jobTitle){\r\n            profileOptional = (\r\n                <div>\r\n                    <p>Job title: {this.props.user.jobTitle}</p>\r\n                </div>\r\n            )\r\n        } else {\r\n            profileOptional = (\r\n                <div>\r\n                    <form onSubmit={this.handleSubmitJT}>\r\n                        <div>\r\n                            <label>\r\n                                Job title:\r\n                                <input type=\"text\" onChange={this.handleChangeJT}/>\r\n                            </label>\r\n                            <input type=\"submit\" value=\"Submit\" />\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            )\r\n        }\r\n        //Displaying user's status\r\n        if(this.props.user.status){\r\n            profileOptional = (\r\n                <div>\r\n                    <p>Status: {this.props.user.status}</p>\r\n                </div>\r\n            )\r\n        } else {\r\n            profileOptional = (\r\n                <div>\r\n                    <form onSubmit={this.handleSubmitS}>\r\n                        <div>\r\n                            <label>\r\n                                Status:\r\n                                <input type=\"text\" onChange={this.handleChangeS}/>\r\n                            </label>\r\n                            <input type=\"submit\" value=\"Submit\" />\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            )\r\n        }\r\n        //Displaying user's bio\r\n        if(this.props.user.bio){\r\n            profileOptional = (\r\n                <div>\r\n                    <p>Status: {this.props.user.bio}</p>\r\n                </div>\r\n            )\r\n        } else {\r\n            profileOptional = (\r\n                <div>\r\n                    <form onSubmit={this.handleSubmitBio}>\r\n                        <div>\r\n                            <label>\r\n                                Bio:\r\n                                <input type=\"text\" onChange={this.handleChangeBio}/>\r\n                            </label>\r\n                            <input type=\"submit\" value=\"Submit\" />\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            )\r\n        }\r\n        //Displaying user's office hours\r\n        if(this.props.user.status){\r\n            profileOptional = (\r\n                <div>\r\n                    <p>Office Hours: {this.props.user.officeHours}</p>\r\n                </div>\r\n            )\r\n        } else {\r\n            profileOptional = (\r\n                <div>\r\n                    <form onSubmit={this.handleSubmitOH}>\r\n                        <div>\r\n                            <label>\r\n                                Office Hours:\r\n                                <input type=\"text\" onChange={this.handleChangeOH}/>\r\n                            </label>\r\n                            <input type=\"submit\" value=\"Submit\" />\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            )\r\n        }\r\n        //Preferred Contacts List (still needs to be done)\r\n        let preferredContacts = (\r\n            <div>\r\n                <h1>Preferred Contacts</h1>\r\n            </div>\r\n        );\r\n        let contactList = this.props.user.preferredContacts;\r\n        for(let i = 0; i < contactList.length; i++) {\r\n            preferredContacts += this.displayPreferredContacts(contactList[i]);\r\n        }\r\n        preferredContacts += (<button onClick={this.addToContacts}>Add contacts</button>)\r\n        profile = (\r\n            <div>\r\n                <div>{profileReq}</div>\r\n                <div>\r\n                    {profileOptional}\r\n                    {preferredContacts}\r\n                </div>\r\n            </div>\r\n        )\r\n        return profile;\r\n    }\r\n\r\n    // Pre-Conditions: Part of profile has been changed\r\n    // Required: Item that has been changed\r\n    // Post-Conditions: Changes content of item & saves to profile\r\n    // This should be where changes to the optional profile fields will\r\n    // sent to the Firebase database since Profile does not have\r\n    // a Controller.\r\n    handleChange(profileItem) {\r\n    }\r\n\r\n    render() {\r\n        let displayProfile = this.displayProfile()\r\n\r\n        if(!this.props.user){\r\n            return (\r\n                <div>\r\n                    <p>Please log-in or sign-up in order to access your profile.</p>\r\n                </div>\r\n            )\r\n        } else {\r\n            return {displayProfile};\r\n        }\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class AlertView extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    \r\n    // Pre-Conditions: AlertView is loaded, and the array of alerts is listed\r\n    // in reverse chronological order\r\n    // Post-Conditions: Returns single unread alert\r\n    displayUnreadAlerts(alert) {\r\n        let unreadAlert = (\r\n            <div className=\"unread\">\r\n                <h2 className=\"unread\">{alert.title}</h2>\r\n                <h6 className=\"unread\">{alert.date.toDateString()} at {alert.time}</h6>\r\n                <p className=\"unread\">{alert.description}</p>\r\n                <button onClick={this.handleReadAlert} id=\"unread\">Mark as Read</button>\r\n                <button onClick={this.handleDelete} className=\"delete\">Delete</button>\r\n            </div>\r\n        )\r\n        return unreadAlert;\r\n    }\r\n\r\n    // Pre-Conditions: AlertView is loaded, and the array of alerts is listed\r\n    // in reverse chronological order\r\n    // Post-Conditions: Returns single read alert\r\n    displayReadAlerts(alert) {\r\n        let readAlert = (\r\n            <div className=\"read\">\r\n                <h2 className=\"read\">{alert.title}</h2>\r\n                <h6 className=\"read\">{alert.date.toDateString()} at {alert.time}</h6>\r\n                <p className=\"read\">{alert.description}</p>\r\n                <button onClick={this.handleDelete} className=\"delete\">Delete</button>\r\n            </div>\r\n        )\r\n        return readAlert;\r\n    }\r\n\r\n    // Pre-Conditions: Alert has been marked as read\r\n    // Required: Alert that has been marked as read\r\n    // Post-Conditions: Changes status & styling of alert\r\n    handleReadAlert(alert) {\r\n    }\r\n\r\n    handleDelete(alert) {\r\n\r\n    }\r\n\r\n    render() {\r\n        let alerts = null;\r\n        // let alertsList = this.props.user.alerts;\r\n        // // How should we go about moving \"critical\" alerts to the front of the list?\r\n        // for(let i = 0; i < alertsList.length; i++) {\r\n        //     if(alertsList[i].status == 'read') {\r\n        //         alerts += this.displayReadAlerts(alertsList[i]);\r\n        //     } else {\r\n        //         alerts += this.displayUnreadAlerts(alertsList[i]);\r\n        //     }\r\n        // }\r\n        return (\r\n            <div>\r\n                {alerts}      \r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { signIn, signUp } from '../Controllers/SignUpController.js'\r\nimport { NavLink } from 'react-router-dom';\r\nimport firebase from 'firebase/app';\r\n\r\nexport default class SignInView extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    handleSignIn = (event) => {\r\n        event.preventDefault()\r\n        firebase.auth().signInWithEmailAndPassword(this.state.email, this.state.password)\r\n            .catch((err) => {\r\n        this.setState({ \r\n          errorMessage: err.message,\r\n          signInErr: \"Login failed. Incorrect email or password.\" \r\n        })\r\n      })\r\n    }\r\n\r\n    // Pre-Conditions: Event must have been sent\r\n    // Post-Conditions: State is updated with event changes\r\n    handleChange = (event) => {\r\n        let field = event.target.name\r\n        let value = event.target.value\r\n\r\n        let changes = {}\r\n\r\n        changes[field] = value\r\n        this.setState(changes)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form className=\"signInForm\">\r\n                    <div>\r\n                        <div>\r\n                            <label>Email</label>\r\n                        </div>\r\n                        <div>\r\n                            <input type=\"email\" name=\"email\" onChange={(e) => this.handleChange(e)}/>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <div>\r\n                            <label>Password</label>\r\n                        </div>\r\n                        <div>\r\n                            <input type=\"password\" name=\"password\" onChange={(e) => this.handleChange(e)}/>\r\n                        </div>\r\n                    </div>\r\n                    <button \r\n                        onClick={(e) => this.handleSignIn(e)}\r\n                        className=\"regButton\">\r\n                        Login\r\n                    </button>\r\n                </form>\r\n                <div>\r\n                    <NavLink id=\"createAccountNav\" to=\"/signup\">Create Account</NavLink>\r\n                    </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport { signUp } from '../Controllers/SignUpController'\r\n\r\nexport default class SignUpView extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    // Pre-Conditions: Event must have been sent\r\n    // Post-Conditions: State is updated with event changes\r\n    handleChange = (event) => {\r\n        let field = event.target.name\r\n        let value = event.target.value\r\n\r\n        let changes = {}\r\n\r\n        changes[field] = value\r\n        this.setState(changes)\r\n    }\r\n\r\n    handleSignUp(e) {\r\n        e.preventDefault()\r\n        if (this.state.email && this.state.password \r\n            && this.state.password === this.state.retypePassword) {\r\n                let user = signUp(this.state.email, this.state.password)\r\n                this.setState(user)\r\n        } else {\r\n            console.log(\"Error creating account\")\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form className=\"signInForm\">\r\n                    <div>\r\n                        <div>\r\n                        <label>Email</label>\r\n                        </div>\r\n                        <div>\r\n                        <input type=\"email\" name=\"email\"\r\n                            onChange={(e) => this.handleChange(e)}/>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <div>\r\n                        <label>Password</label>\r\n                        </div>\r\n                        <div>\r\n                        <input type=\"password\" name=\"password\"\r\n                            onChange={(e) => this.handleChange(e)}/>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <div>\r\n                        <label>Retype Password</label>\r\n                        </div>\r\n                        <div>\r\n                        <input type=\"password\" name=\"retypePassword\"\r\n                            onChange={(e) => this.handleChange(e)}/>\r\n                        </div>\r\n                    </div>\r\n                    <button \r\n                        onClick={(e) => this.handleSignUp(e)}\r\n                        className=\"createAccount\">\r\n                        Create Account\r\n                    </button>\r\n                </form>\r\n                <div>\r\n                    <NavLink id=\"navLinkAccount\" to=\"/signin\">Already Have an Account?</NavLink>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import firebase from 'firebase/app';\r\nimport { storeEvent } from './FirebaseController';\r\n\r\n// Pre-Conditions: User must have entered email & password\r\n// Post-Conditions: Successfully log user into their account, \r\n// send error that login information was incorrect, or that\r\n// information does not match format need\r\nexport function signIn(email, password) {\r\n    firebase.auth().signInWithCredential(email, password)\r\n        .catch((err) => {\r\n            return err.message\r\n        })\r\n}\r\n\r\n\r\n// Pre-Conditions: User must have entered email and password\r\n// Post-Conditions: Successfully creates user account with given\r\n// information or sends error for incomplete form\r\nexport function signUp(email, password) {\r\n    firebase.auth().createUserWithEmailAndPassword(email, password)\r\n        .then(function() {\r\n            var user = firebase.auth().currentUser\r\n\r\n            let userObject = {\r\n                email: user.email,\r\n                uid: user.uid.toString()\r\n            }\r\n\r\n            storeEvent(userObject, \"users/\" + user.uid.toString())\r\n            return userObject\r\n        }).catch((err) => {\r\n            console.log(err.message)\r\n            return err.message\r\n        })\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { retrieveRoutineItem, createRoutineItem, editRoutineItem, removeRoutineItem } from '../Controllers/RoutineController'\r\nimport firebase from 'firebase/app';\r\n\r\nexport default class EditPreWorkView extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.listInfo = this.listInfo.bind(this)\r\n\r\n        this.state = {\r\n            checklistItems: new Map()\r\n            // user: this.props.user.uid\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"Test!\")\r\n        this.retrievePreWorkItems()\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        console.log(this.state)\r\n    }\r\n\r\n    // Mount Functions\r\n\r\n    retrievePreWorkItems() {\r\n        let rootPath = firebase.database().ref('routine')\r\n\r\n        if (this.props.user) {\r\n            rootPath.once('value', (snapshot) => {\r\n                let info = snapshot.val()\r\n                console.log(info)\r\n                if (info) {\r\n                    console.log(info[this.props.user.uid])\r\n                    // let keys = Object.keys(info)\r\n                    let itemMap = new Map()\r\n    \r\n                    let keys = Object.keys(info[this.props.user.uid])\r\n                    \r\n                    keys.map((key) => {\r\n                        itemMap.set(key, info[this.props.user.uid][key])\r\n                    })\r\n                    this.setState((state) => {\r\n                        state.checklistItems = itemMap\r\n                        return state\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    // Event Handlers\r\n\r\n    submitEditItem(e) {\r\n        e.preventDefault()\r\n        editRoutineItem(this.state.editItemName, this.props.user.uid, this.state.currentListItemID)\r\n        let newMap = this.state.checklistItems\r\n        console.log(newMap)\r\n        let item = newMap.get(this.state.currentListItemID)\r\n        console.log(item)\r\n        item.name = this.state.editItemName\r\n        newMap.set(this.state.currentListItemID, item)\r\n        this.setState((state) => {\r\n            state.checklistItems = newMap\r\n            state.editItemModal = \"none\"\r\n            return state\r\n        })\r\n    }\r\n    \r\n    removeItem(e) {\r\n        e.preventDefault()\r\n        removeRoutineItem(this.props.user.uid, this.state.currentListItemID)\r\n        let newMap = this.state.checklistItems\r\n        newMap.delete(this.state.currentListItemID)\r\n\r\n        this.setState((state) => {\r\n            state.checklistItems = newMap\r\n            state.editItemModal = \"none\"\r\n            return state\r\n        })\r\n    }\r\n\r\n    addPreWorkItem(e) {\r\n        e.preventDefault()\r\n        let checklistItems = this.state.checklistItems\r\n\r\n        let preWorkItem = {\r\n            name: this.state.preWorkName,\r\n            starred: false\r\n        }\r\n\r\n        let itemID = createRoutineItem(preWorkItem, this.props.user.uid)\r\n\r\n        checklistItems.set(itemID, preWorkItem)\r\n\r\n        this.setState((state) => {\r\n            this.state.checklistItems = checklistItems\r\n            this.state.addItemModal = \"none\"\r\n            return state\r\n        })\r\n    }\r\n\r\n    openAddItemModal(e) {\r\n        e.preventDefault()\r\n        this.setState((state) => {\r\n            state.addItemModal = \"block\"\r\n            return state\r\n        })\r\n    }\r\n\r\n    openEditItemModal(e) {\r\n        e.preventDefault()\r\n        this.setState((state) => {\r\n            state.editItemModal = \"block\"\r\n            return state\r\n        })\r\n    }\r\n\r\n    closeAddItemModal(e) {\r\n        e.preventDefault()\r\n        this.setState((state) => {\r\n            state.preWorkName = \"\"\r\n            state.addItemModal = \"none\"\r\n            return state\r\n        })\r\n    }\r\n\r\n    // Pre-Conditions: Event must have been sent\r\n    // Post-Conditions: State is updated with event changes\r\n    handleChange = (event) => {\r\n        let field = event.target.name\r\n        let value = event.target.value\r\n\r\n        let changes = {}\r\n\r\n        changes[field] = value\r\n        this.setState(changes)\r\n    }\r\n\r\n    closeEditItemModal(e) {\r\n        e.preventDefault()\r\n        this.setState((state) => {\r\n            state.editItemModal = \"none\";\r\n            return state\r\n        })\r\n    }\r\n\r\n    // Display Functions\r\n\r\n    editItemModal() {\r\n        let content = (\r\n            <div className=\"modalBox\"\r\n                style={{display: this.state.editItemModal}}>\r\n                <div>\r\n                    <form className=\"preWorkModalForm\">\r\n                        <button\r\n                            onClick={(e) => this.closeEditItemModal(e)}\r\n                            className=\"closeModal\">\r\n                                X\r\n                            </button>\r\n                        <div className=\"preWorkModalContent\">\r\n                            <div>\r\n                                <input id=\"editName\"\r\n                                    onChange={(e) => this.handleChange(e)}\r\n                                    placeholder=\"Edit Item Name\"\r\n                                    name=\"editItemName\"/>\r\n                            </div>\r\n                            <div id=\"saveRemoveButtons\">\r\n                                <button\r\n                                    onClick={(e) => this.submitEditItem(e)}\r\n                                    className=\"editSave\">Save</button>\r\n                                <button\r\n                                    onClick={(e) => this.removeItem(e)}\r\n                                    className=\"itemRemoveButton\">\r\n                                        Remove\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n        return content\r\n    }\r\n\r\n    addItemModal() {\r\n        let content = (\r\n            <div className=\"modalBox\"\r\n                style={{display: this.state.addItemModal}}>\r\n                <div>\r\n                    <form className=\"preWorkModalForm\">\r\n                        <button\r\n                            onClick={(e) => this.closeAddItemModal(e)} \r\n                            className=\"closeModal\">\r\n                            X\r\n                        </button>\r\n                        <div className=\"preWorkModalContent\">\r\n                            <div>\r\n                                <input className=\"modalInput\" required\r\n                                    id=\"addName\"\r\n                                    onChange={(e) => this.handleChange(e)}\r\n                                    placeholder=\"PreWork Name\"\r\n                                    type=\"text\"\r\n                                    name=\"preWorkName\"\r\n                                />\r\n                            </div>\r\n                            <button\r\n                                id=\"addItemButton\"\r\n                                onClick={(e) => this.addPreWorkItem(e)}>\r\n                                Add\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n        return content\r\n    }\r\n\r\n    renderPreWorkList() {\r\n        const list = Array.from(this.state.checklistItems.entries()).map((key) => {\r\n            return <PreworkItem\r\n                listInfo={this.listInfo}\r\n                id={key[0]}\r\n                name={key[1].name}\r\n                starred={key[1].starred}/>\r\n        })\r\n        return list\r\n    }\r\n\r\n    // Pre-Conditions: PreWorkView is loaded\r\n    // Post-Conditions: Displays pre-work routine\r\n    displayPreWork() {\r\n        const checklistItems = this.renderPreWorkList()\r\n\r\n        let content = (\r\n            <div>\r\n                <div>\r\n                    <div className=\"preWorkTitleElements\">\r\n                        <div>\r\n                        <h2>\r\n                            Pre-Work Items\r\n                        </h2>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <ul className=\"listGroup\">\r\n                            {checklistItems}\r\n                        </ul>\r\n                    </div>\r\n                    <div>\r\n                        <button className=\"addItemButton\"\r\n                            onClick={(e) => this.openAddItemModal(e)}>\r\n                            <span>&#43;</span>\r\n                        </button>\r\n                        </div>\r\n                </div>\r\n            </div>\r\n        )\r\n        return content\r\n    }\r\n\r\n    // Pre-Conditions: User has clicked \"edit\" button\r\n    // Post-Conditions: Display edit pop-up & send \r\n    // filled in information Routine Controller\r\n    displayEditPreWork() {\r\n\r\n    }\r\n\r\n    listInfo(e, id, name) {\r\n        e.preventDefault()\r\n        this.setState((state) => {\r\n            state.editItemModal = \"block\"\r\n            state.currentListItemID = id\r\n            state.currentListItemName = name\r\n            return state\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let displayPreWork = this.displayPreWork()\r\n        let addItemModal = this.addItemModal()\r\n        let editItemModal = this.editItemModal()\r\n\r\n        return (\r\n            <div className=\"editPreWorkView\">\r\n                <div>\r\n                    {displayPreWork}\r\n                </div>\r\n                <div>\r\n                    {addItemModal}\r\n                    {editItemModal}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nclass PreworkItem extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"editPreWorkListItem\">\r\n                <li className=\"listpreWork\"><button \r\n                onClick={(e) => this.props.listInfo(e, this.props.id, this.props.name)}\r\n                className=\"listButton\">{this.props.name}</button></li>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Route, Switch, Redirect, BrowserRouter, withRouter } from 'react-router-dom';\r\nimport './App.css';\r\n\r\nimport firebase from 'firebase/app';\r\n\r\nimport HeaderView from './Views/HeaderView';\r\nimport FooterView from './Views/FooterView';\r\nimport WelcomeView from './Views/WelcomeView';\r\nimport CalendarView from './Views/CalendarView';\r\nimport ProfileView from './Views/ProfileView';\r\nimport AlertView from './Views/AlertView';\r\nimport SignInView from './Views/SignInView';\r\nimport SignUpView from './Views/SignUpView';\r\nimport EditPreWorkView from './Views/EditPreWorkView';\r\nimport { WindowScrollController } from '@fullcalendar/core';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      user: null\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.authUnSubFunction = firebase.auth().onAuthStateChanged((firebaseUser) => {\r\n      if (firebaseUser) { // If user is logged in\r\n        window.location=\"#\"\r\n        this.setState({\r\n          user: firebaseUser\r\n        })\r\n      } else { // Log user out\r\n        window.location=\"#\"\r\n        this.setState({\r\n          user: null\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.authUnSubFunction(); // Stops listening for auth changes\r\n  }\r\n\r\n  render() {\r\n    let content = null;\r\n\r\n    content = (\r\n      <Switch>\r\n        <Route exact path=\"/\" render={() => <WelcomeView\r\n          {...this.state}/>}/>\r\n        <Route path=\"/calendar\" render={() => <CalendarView \r\n          {...this.state}/>} />\r\n        <Route path=\"/profile\" component={ProfileView} />\r\n        <Route path=\"/alerts\" component={AlertView} />\r\n        <Route path=\"/signin\" render={() => <SignInView\r\n          {...this.state}/>} />\r\n        <Route path=\"/prework\" render={() => <EditPreWorkView\r\n          {...this.state}\r\n          currentUser={this.state.user}/>}\r\n        />\r\n        <Route path=\"/signup\" render={() =>\r\n          <SignUpView\r\n            {...this.state}/>} />\r\n        {/*\r\n          Add more routes as views get made using react-router-dom \r\n          eg: <Route path='/calendar' component={CalendarView}/>  */}\r\n      </Switch>\r\n    )\r\n\r\n    return (\r\n      <div className=\"DailyGrind\">\r\n        <header className=\"header\">\r\n          <HeaderView user={this.state.user}></HeaderView>\r\n        </header>\r\n\r\n        <main>\r\n          {content}\r\n        </main>\r\n\r\n        <footer className=\"footer\">\r\n          <FooterView></FooterView>\r\n        </footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {HashRouter } from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/database';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nlet config = {\r\n  apiKey: \"AIzaSyBo_JJSCm3s7IVHAoMuh5WnjuEhny4HqZY\",\r\n  authDomain: \"info442-s20-dailygrind.firebaseapp.com\",\r\n  databaseURL: \"https://info442-s20-dailygrind.firebaseio.com\",\r\n  projectId: \"info442-s20-dailygrind\",\r\n  storageBucket: \"info442-s20-dailygrind.appspot.com\",\r\n  messagingSenderId: \"550288362845\",\r\n  appId: \"1:550288362845:web:ee14e06dccc6b03d526cb4\",\r\n  measurementId: \"G-G09PD0YC5K\"\r\n}\r\n\r\nfirebase.initializeApp(config);\r\n\r\nReactDOM.render(\r\n  <HashRouter><App /></HashRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}