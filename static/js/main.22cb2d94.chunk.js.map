{"version":3,"sources":["Views/EventView.js","Controllers/FirebaseController.js","Views/CalendarView.js","Controllers/EventController.js","Views/HeaderView.js","Views/FooterView.js","Controllers/RoutineController.js","Views/PreWorkView.js","Views/WelcomeView.js","Views/ProfileView.js","Views/AlertView.js","Views/SignInView.js","Views/SignUpView.js","Controllers/SignUpController.js","Views/EditPreWorkView.js","App.js","serviceWorker.js","index.js"],"names":["EventView","console","log","this","props","currentStart","currentEnd","className","currentTitle","currentDescription","onClick","e","editViewEventModalButton","removeCalendarEvent","content","displayEvent","Component","EditEventView","onChange","handleChange","id","placeholder","type","name","value","min","eventTime1","maxlength","rows","cols","displayEditEvent","storeEvent","event","route","key","firebase","database","ref","push","getKey","sendEvent","info","once","snapshot","val","CalendarView","handleEventClick","arg","eventEnd","start","eventStart","formatDate","hour","minute","end","formattedDate","month","year","day","weekday","setState","state","extendedProps","description","title","currentAttendees","attendees","currentDate","eventModal","currentID","field","target","changes","calendarComponentRef","React","createRef","Date","bind","updateCalendarEvent","calendarWeekends","calendarEvents","user","uid","string","hash","length","i","charCodeAt","preventDefault","eventDate","allDay","eventTime2","hashString","stringToHash","eventName","calendarObject","concat","newArray","array","index","toString","splice","deleteEvent","test","t","addEventModal","editModal","repeatingForm","eventRepeating","repeatingStartDate","style","display","closeAddEventModalButton","required","addCalendarEvent","closeViewEventModalButton","closeEditEventModalButton","defaultView","header","left","center","right","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","weekends","events","dateClick","handleDateClick","eventClick","addEventModalForm","calendar","displayCalendar","viewModal","editEventModal","viewEventModal","addEventModalButton","HeaderView","links","to","FooterView","createRoutineItem","PreWorkView","checklistItems","Map","retrievePreWorkItems","itemMap","Object","keys","map","set","preWorkItem","preWorkName","starred","itemID","addItemModal","editItemModal","closeEditItemModal","closeAddItemModal","addPreWorkItem","Array","from","entries","renderPreWorkList","displayPreWork","PreworkItem","WelcomeView","date","toDateString","intervalID","setInterval","tick","clearInterval","now","getHours","getMinutes","ampm","time","ProfileView","jobTitle","status","bio","officeHours","contact","rowspan","src","profilePhoto","alt","organization","profileReq","theme","colspan","profileOptional","onSubmit","handleSubmitJT","handleChangeJT","handleSubmitS","handleChangeS","handleSubmitBio","handleChangeBio","handleSubmitOH","handleChangeOH","preferredContacts","contactList","displayPreferredContacts","addToContacts","profileItem","displayProfile","AlertView","alert","handleReadAlert","handleDelete","SignInView","handleSignIn","SignUpView","email","password","retypePassword","auth","createUserWithEmailAndPassword","then","currentUser","userObject","catch","err","message","handleSignUp","EditPreWorkView","openAddItemModal","App","authUnSubFunction","onAuthStateChanged","firebaseUser","exact","path","render","component","Boolean","window","location","hostname","match","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.22cb2d94.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport class EventView extends Component {\r\n    componentDidMount() {\r\n        console.log(this.props)\r\n    }\r\n\r\n    // Pre-Conditions: An event must be clicked on\r\n    // Post-Conditions: Display event information that\r\n    // was clicked\r\n    displayEvent() {\r\n        let currentStart = this.props.currentStart !== \"\" ? this.props.currentStart : \"\"\r\n        let currentEnd = this.props.currentEnd !== \"\" ? \" - \" + this.props.currentEnd : \"\"\r\n\r\n        let content = (\r\n            <div className=\"modalContent\">\r\n                <div>\r\n                    <h2>{this.props.currentTitle}</h2>\r\n                </div>\r\n                <div>\r\n                    <p>{currentStart}{currentEnd}</p>\r\n                </div>\r\n                <div>\r\n                    <p>{this.props.currentDescription}</p>\r\n                </div>\r\n                <button\r\n                    onClick={(e) => this.props.editViewEventModalButton(e)}\r\n                    className=\"editButton\">\r\n                    <span>&#9998;</span>\r\n                </button>\r\n                <button\r\n                    onClick={(e) => this.props.removeCalendarEvent(e)}\r\n                    className=\"removeButton\">\r\n                    <span>&#128465;</span>\r\n                </button>\r\n            </div>\r\n        )\r\n        return content\r\n    }\r\n\r\n\r\n    render() {\r\n        let content = this.displayEvent()\r\n\r\n        return (\r\n            <div>\r\n                {content}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport class EditEventView extends Component {\r\n    componentDidMount() {\r\n    }\r\n\r\n    displayEditEvent() {\r\n        let content = (\r\n            <div className=\"modalContent\">\r\n                <div>\r\n                    <input className=\"modalInput\"\r\n                        onChange={(e) => this.props.handleChange(e)}\r\n                        id=\"eventName\" placeholder=\"Event Name\" type=\"text\" name=\"eventName\"\r\n                        value={this.props.currentTitle} />\r\n                </div>\r\n                <div>\r\n                    <label className=\"modalLabel\"><b>Date</b></label>\r\n                    <input className=\"modalInput\"\r\n                        onChange={(e) => this.props.handleChange(e)}\r\n                        type=\"date\" name=\"eventDate\" \r\n                        value={this.props.currentStart}/>\r\n                </div>\r\n                <div id=\"timeRange\">\r\n                    <label className=\"modalLabel\"><b>Time Range</b></label>\r\n                    <input className=\"modalInputTime\"\r\n                        onChange={(e) => this.props.handleChange(e)}\r\n                        type=\"time\" name=\"eventTime1\" />\r\n                    <input className=\"modalInputTime\"\r\n                        onChange={(e) => this.props.handleChange(e)}\r\n                        min={this.props.eventTime1}\r\n                        type=\"time\" name=\"eventTime2\" />\r\n                </div>\r\n                <div>\r\n                    <label className=\"modalLabel\"><b>Location</b></label>\r\n                    <input className=\"modalInput\"\r\n                        onChange={(e) => this.props.handleChange(e)}\r\n                        placeholder=\"Event Location\" type=\"text\" name=\"eventLocation\" />\r\n                </div>\r\n                <div id=\"textAreaDescription\">\r\n                    <label className=\"modalLabel\"><b>Event Description</b></label>\r\n                    <textarea maxlength=\"500\" className=\"modalInput\" placeholder=\"Enter a description\"\r\n                        onChange={(e) => this.props.handleChange(e)}\r\n                        rows=\"4\" cols=\"50\"\r\n                        name=\"eventDescription\" />\r\n                </div>\r\n                <div>\r\n                    <label className=\"modalLabel\"><b>Attendees</b></label>\r\n                    <input className=\"modalInput\"\r\n                        onChange={(e) => this.props.handleChange(e)}\r\n                        placeholder=\"Search...\" type=\"textarea\" name=\"eventDescription\" />\r\n                </div>\r\n                <div>\r\n                    <label className=\"modalLabel\"><b>Reminders?</b></label>\r\n                    <input className=\"modalInput\"\r\n                        onChange={(e) => this.props.handleChange(e)}\r\n                        type=\"checkbox\" name=\"eventReminders\" /><span>Yes</span>\r\n                </div>\r\n                <div>\r\n                    <button className=\"save\">\r\n                        <b>Save</b>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n        return content\r\n    }\r\n\r\n    render() {\r\n        let content = this.displayEditEvent()\r\n\r\n        return (\r\n            <div>\r\n                {content}\r\n            </div>\r\n        )\r\n    }\r\n}","import firebase from 'firebase/app';\r\n\r\n\r\n// Pre-Conditions: Information must have been sent\r\n// from a controller component\r\n// Requires: Event, information received as an object\r\n//           Route, path to send information to in Firebase\r\n// Post-Conditions: Succesfully stores\r\n// received information to Firebase\r\nexport function storeEvent(event, route) {\r\n    let rootPath = firebase.database().ref(route)\r\n    let key = rootPath.push(event).getKey()\r\n    console.log(key)\r\n    return key\r\n}\r\n\r\n// Pre-Conditions: Information must be requested\r\n// from a controller component\r\n// Requires: Event, information received as an object\r\n// Post-Conditions: Returns requested information\r\n// from Firebase back to relevant controller\r\nexport function sendEvent(event, route) {\r\n    let rootPath = firebase.database().ref(route)\r\n    \r\n    var info\r\n\r\n    rootPath.once(\"value\", (snapshot) => {\r\n        info = snapshot.val()\r\n    })\r\n\r\n    return info\r\n}\r\n\r\n// Pre-Conditions: Information must be sent from a controller\r\n// component along with the route with an object to update\r\n// Post-Conditions: Successfully updates proper component\r\n// in Firebase Database\r\nexport function updateEvent(event, route) {\r\n    let rootPath = firebase.database().ref(route)\r\n    rootPath.update({\r\n        event\r\n    })\r\n}\r\n\r\n// Pre-conditions: Information must be request\r\n// from a controller component to remove\r\n// Requires: Event, information received as an object\r\n// Post-Conditions: Returns removed event information\r\n// from Fireback back to relevant controller\r\nexport function removeEvent(route) {\r\n    let rootPath = firebase.database().ref(route)\r\n    rootPath.remove()\r\n}","import React, { Component } from 'react';\r\n\r\n// Views\r\nimport { EventView, EditEventView } from './EventView.js'\r\n\r\n// Controllers\r\nimport { retrieveEvent, createEvent, editEvent, deleteEvent } from '../Controllers/EventController.js'\r\n\r\nimport FullCalendar from '@fullcalendar/react'\r\nimport { formatDate } from '@fullcalendar/core'\r\nimport dayGridPlugin from '@fullcalendar/daygrid'\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\"; // needed for dayClick\r\n\r\nimport '../main.css'\r\nimport \"@fullcalendar/core/main.css\";\r\nimport \"@fullcalendar/daygrid/main.css\";\r\nimport \"@fullcalendar/timegrid/main.css\";\r\n\r\nexport default class CalendarView extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.calendarComponentRef = React.createRef();\r\n        let test = new Date('June 2, 2020')\r\n        let test2 = new Date('June 3, 2020')\r\n\r\n        this.editViewEventModalButton = this.editViewEventModalButton.bind(this)\r\n        this.removeCalendarEvent = this.removeCalendarEvent.bind(this)\r\n        this.updateCalendarEvent = this.updateCalendarEvent.bind(this)\r\n\r\n        this.state = {\r\n            calendarWeekends: true,\r\n            calendarEvents: [\r\n                // // initial event data\r\n                // { title: \"Event Now\", start: new Date(\"2020-06-03\" + 'T00:00:00'), allDay: true },\r\n                // { title: \"Test Date\", start: test, description: \"testtest\", yuh: \"hell yeah!\", attendees: [\"test1\",\"test2\"]}\r\n            ]\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"Mounted\")\r\n        console.log(this.props)\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        console.log(this.state)\r\n    }\r\n\r\n    // Initliazation Functions\r\n\r\n    // Pre-Conditions: User switches to Calendar tab and has calendar events\r\n    // Post-Conditions: Loads calendar information into state\r\n    retrieveUserCalendar() {\r\n        retrieveEvent(this.props.user.uid)\r\n    }\r\n\r\n    // Helper Functions\r\n\r\n    // Pre-Conditions: String must have been\r\n    // sent to hash\r\n    // Post-Condition: Returns string as a hashed\r\n    // string\r\n    stringToHash(string) {  \r\n        var hash = 0; \r\n          \r\n        if (string.length == 0) return hash; \r\n          \r\n        for (let i = 0; i < string.length; i++) { \r\n            let char = string.charCodeAt(i); \r\n            hash = ((hash << 5) - hash) + char; \r\n            hash = hash & hash; \r\n        } \r\n          \r\n        return hash; \r\n    } \r\n\r\n\r\n    // Controller Functions\r\n\r\n    // Pre-Conditions: \"Save\" button is clicked with all required\r\n    // fields filled out\r\n    // Post-Conditions: Creates a calendar event and adds it to\r\n    // to the calendar client-side and sends information to Firebase\r\n    // to store/add\r\n    addCalendarEvent(e) {\r\n        e.preventDefault()\r\n        let eventTime1 = this.state.eventTime1 ? this.state.eventTime1 : \"\"\r\n        \r\n        let start = new Date(this.state.eventDate + 'T00:00:00')\r\n        let end = \"\"\r\n        let allDay = true\r\n\r\n        if (eventTime1 !== \"\") {\r\n            start = new Date(this.state.eventDate + ' ' + this.state.eventTime1)\r\n            allDay = false\r\n        }\r\n\r\n        // Transform \r\n        if (this.state.eventTime2) {\r\n            end = new Date(this.state.eventDate + ' ' + this.state.eventTime2)\r\n        }\r\n\r\n        let description = this.state.description ? this.state.description : \"\"\r\n\r\n        console.log(start)\r\n\r\n        let hashString = this.stringToHash(this.props.user.uid + this.state.eventName + start)\r\n\r\n        console.log(hashString)\r\n\r\n        // Represents a single event object to add to Firebase\r\n        let calendarObject = {\r\n            title: this.state.eventName,\r\n            start: start,\r\n            end: end,\r\n            description: description,\r\n            id: hashString,\r\n            allDay: true\r\n        }\r\n\r\n        // Add \r\n        this.setState({\r\n            calendarEvents: this.state.calendarEvents.concat({\r\n                title: this.state.eventName,\r\n                start: start,\r\n                end: end,\r\n                description: description,\r\n                id: hashString,\r\n                allDay: allDay\r\n            })\r\n        })\r\n        // Call controller\r\n        createEvent(calendarObject, this.props.user.uid)\r\n    }\r\n\r\n    // Pre-Conditions: User clicks on edit button\r\n    // Post-Conditions: Updates calendar and sends updated information\r\n    // to Firebase\r\n    updateCalendarEvent(e) {\r\n        e.preventDefault()\r\n        // Need to edit Firebase value\r\n        // Remove this value from calendar object\r\n        // Re-add updated information\r\n    }\r\n\r\n    // Pre-Conditions: User clicks on remove button\r\n    // Post-Conditions: Updates calendar to remove event\r\n    // and removes information from Firebase\r\n    removeCalendarEvent(e) {\r\n        e.preventDefault()\r\n        let calendarArray = this.state.calendarEvents\r\n        let newArray = deleteEvent(calendarArray, this.state.currentID, this.props.user.uid)\r\n\r\n        // this.setState((state) => {\r\n        //     state.calendarEvents = newArray\r\n        //     return state\r\n        // })\r\n        this.test(newArray)\r\n        // if (calendarArray.length <= 1) {\r\n        //     calendarArray = []\r\n        // } else {\r\n        //     for (let i = 0; i <= calendarArray.length - 1; i++) {\r\n        //         if (calendarArray[i].id.toString() === this.state.currentID.toString()) {\r\n        //             calendarArray.splice(i, 1)\r\n\r\n        //             this.setState((state) => {\r\n        //                 state.calendarEvents = calendarArray\r\n        //                 return state\r\n        //             })\r\n        //         }\r\n        //     }\r\n        // }\r\n\r\n    }\r\n\r\n    test(t) {\r\n        this.setState((state) => {\r\n            state.calendarEvents = t\r\n            return state\r\n        })\r\n    }\r\n\r\n    // Event Actions\r\n\r\n    handleEventClick = arg => {\r\n        let eventEnd = \"\"\r\n\r\n        console.log(arg.event.start)\r\n\r\n        let eventStart = formatDate(arg.event.start, {\r\n            hour: 'numeric',\r\n            minute: '2-digit'\r\n        })\r\n\r\n        if (arg.event.end) {\r\n            eventEnd = formatDate(arg.event.end, {\r\n                hour: 'numeric',\r\n                minute: '2-digit'\r\n            })\r\n        }\r\n\r\n        let formattedDate = formatDate(arg.event.start, {\r\n            month: \"long\",\r\n            year: 'numeric',\r\n            day: 'numeric',\r\n            weekday: 'long'\r\n        })\r\n\r\n        this.setState((state) => {\r\n            state.currentDescription = arg.event.extendedProps.description\r\n            state.currentTitle = arg.event.title\r\n            state.currentAttendees = arg.event.extendedProps.attendees\r\n            state.currentDate = formattedDate\r\n            state.currentStart = eventStart\r\n            state.currentEnd = eventEnd\r\n            state.eventModal = \"block\"\r\n            state.currentID = arg.event.id\r\n            return state\r\n        })\r\n    }\r\n\r\n    // handleDateClick = arg => {\r\n    //     console.log(arg)\r\n    //     // if (window.confirm(\"Would you like to add an event to \" + arg.dateStr + \" ?\")) {\r\n    //     //   this.setState({\r\n    //     //     // add new event data\r\n    //     //     calendarEvents: this.state.calendarEvents.concat({\r\n    //     //       // creates a new array\r\n    //     //       title: \"New Event\",\r\n    //     //       start: arg.date,\r\n    //     //       allDay: arg.allDay\r\n    //     //     })\r\n    //     //   });\r\n    //     // }\r\n    //   };\r\n\r\n    // Pre-Conditions: Event must have been sent\r\n    // Post-Conditions: State is updated with event changes\r\n    handleChange = (event) => {\r\n        let field = event.target.name\r\n        let value = event.target.value\r\n\r\n        let changes = {}\r\n\r\n        changes[field] = value\r\n        this.setState(changes)\r\n    }\r\n\r\n    // Pre-Conditions: Add button must have been clicked on\r\n    // Post-Conditions: Displays modal box for adding new event\r\n    addEventModalButton(e) {\r\n        e.preventDefault()\r\n        this.setState((state) => {\r\n            state.addEventModal = \"block\"\r\n            return state\r\n        })\r\n    }\r\n\r\n    editViewEventModalButton(e) {\r\n        e.preventDefault()\r\n        this.setState((state) => {\r\n            state.eventModal = \"none\"\r\n            state.editModal = \"block;\"\r\n            return state\r\n        })\r\n    }\r\n\r\n    // Pre-Conditions: Modal box for adding event must be visible\r\n    // and close button must have been clicked\r\n    // Post-Conditions: Modal box is no longer shown\r\n    closeAddEventModalButton(e) {\r\n        e.preventDefault()\r\n        this.setState((state) => {\r\n            state.addEventModal = \"none\"\r\n            return state\r\n        })\r\n    }\r\n\r\n    closeViewEventModalButton(e) {\r\n        e.preventDefault()\r\n        this.setState((state) => {\r\n            state.eventModal = \"none\"\r\n            return state\r\n        })\r\n    }\r\n\r\n    closeEditEventModalButton(e) {\r\n        e.preventDefault()\r\n        this.setState((state) => {\r\n            state.editModal = \"none\"\r\n            return state\r\n        })\r\n    }\r\n\r\n    // Forms\r\n\r\n    // Pre-Conditions: + Add Event Button must have been clicked\r\n    // Post-Conditions: Returns modal form for adding event\r\n    addEventModalForm() {\r\n        let repeatingForm = null\r\n\r\n        if (this.state.eventRepeating === \"on\") {\r\n            console.log(\"Yes!\")\r\n            repeatingForm = (\r\n                <div className=\"repeatingForm\">\r\n                    <div>\r\n                        <label className=\"repeatingLabel\">Daily</label>\r\n                        <input className=\"repeatingInput\"\r\n                            onChange={(e) => this.handleChange(e)}\r\n                            type=\"checkbox\" name=\"repeatingDaily\" />\r\n                        <label className=\"repeatingLabel\">Weekly</label>\r\n                        <input className=\"repeatingInput\"\r\n                            onChange={(e) => this.handleChange(e)}\r\n                            type=\"checkbox\" name=\"repeatingWeekly\" />\r\n                        <label className=\"repeatingLabel\">Monthly</label>\r\n                        <input className=\"repeatingInput\"\r\n                            onChange={(e) => this.handleChange(e)}\r\n                            type=\"checkbox\" name=\"repeatingMonthly\" />\r\n                    </div>\r\n                    <div>\r\n                        <div>\r\n                            <label className=\"repeatingLabel\">Start Date</label>\r\n                            <input className=\"repeatingInput\" \r\n                            onChange={(e) => this.handleChange(e)}\r\n                            type=\"date\" name=\"repeatingStartDate\"/>\r\n                        </div>\r\n                        <div>\r\n                        <label className=\"repeatingLabel\">End Date</label>\r\n                        <input className=\"repeatingInput\" type=\"date\"\r\n                            onChange={(e) => this.handleChange(e)} \r\n                            min={this.state.repeatingStartDate} name=\"repeatingEndDate\"/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            repeatingForm = null\r\n        }\r\n\r\n        let form = (\r\n            <div className=\"modalBox\"\r\n                style={{ display: this.state.addEventModal }}>\r\n                <div>\r\n                    <form className=\"modalForm\">\r\n                        <button className=\"closeModal\"\r\n                            onClick={(e) => this.closeAddEventModalButton(e)}>\r\n                            X\r\n                    </button>\r\n                        <div className=\"modalContent\">\r\n                            <div>\r\n                                <input className=\"modalInput\" required\r\n                                    onChange={(e) => this.handleChange(e)}\r\n                                    id=\"eventName\" placeholder=\"Event Name\" type=\"text\" name=\"eventName\" />\r\n                            </div>\r\n                            <div>\r\n                                <label className=\"modalLabel\"><b>Date</b></label>\r\n                                <input className=\"modalInput\" required\r\n                                    onChange={(e) => this.handleChange(e)}\r\n                                    type=\"date\" name=\"eventDate\" />\r\n                            </div>\r\n                            <div id=\"timeRange\">\r\n                                <label className=\"modalLabel\"><b>Time Range</b></label>\r\n                                <input className=\"modalInputTime\"\r\n                                    onChange={(e) => this.handleChange(e)}\r\n                                    type=\"time\" name=\"eventTime1\" />\r\n                                <input className=\"modalInputTime\"\r\n                                    onChange={(e) => this.handleChange(e)}\r\n                                    min={this.state.eventTime1}\r\n                                    type=\"time\" name=\"eventTime2\" />\r\n                            </div>\r\n                            <div>\r\n                                <label className=\"modalLabel\"><b>Location</b></label>\r\n                                <input className=\"modalInput\" value=\"\"\r\n                                    onChange={(e) => this.handleChange(e)}\r\n                                    placeholder=\"Event Location\" type=\"text\" name=\"eventLocation\" />\r\n                            </div>\r\n                            <div id=\"textAreaDescription\">\r\n                                <label className=\"modalLabel\"><b>Event Description</b></label>\r\n                                <textarea maxlength=\"500\" className=\"modalInput\" placeholder=\"Enter a description\"\r\n                                    onChange={(e) => this.handleChange(e)}\r\n                                    rows=\"4\" cols=\"50\"\r\n                                    value=\"\"\r\n                                    name=\"eventDescription\" />\r\n                            </div>\r\n                            <div>\r\n                                <label className=\"modalLabel\"><b>Attendees</b></label>\r\n                                <input className=\"modalInput\"\r\n                                    onChange={(e) => this.handleChange(e)}\r\n                                    placeholder=\"Search...\" type=\"textarea\" name=\"eventDescription\" />\r\n                            </div>\r\n                            <div>\r\n                                <label className=\"modalLabel\"><b>Reminders?</b></label>\r\n                                <input className=\"modalInput\"\r\n                                    onChange={(e) => this.handleChange(e)}\r\n                                    type=\"checkbox\" name=\"eventReminders\" /><span>Yes</span>\r\n                            </div>\r\n                            <div>\r\n                                <label className=\"modalLabel\"><b>Repeating Events?</b></label>\r\n                                <input className=\"modalInput\"\r\n                                    onChange={(e) => this.handleChange(e)}\r\n                                    type=\"checkbox\" name=\"eventRepeating\" /><span>Yes</span>\r\n                                {repeatingForm}\r\n                            </div>\r\n                            <div>\r\n                                <button \r\n                                    onClick={(e) => this.addCalendarEvent(e)}\r\n                                    className=\"save\">\r\n                                    <b>Save</b>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n        return form\r\n    }\r\n\r\n    viewEventModal() {\r\n        let viewModal = (\r\n            <div \r\n                className=\"modalBox\" \r\n                style={{ display: this.state.eventModal }}>\r\n                <div>\r\n                    <form\r\n                        className=\"modalForm\">\r\n                            <button\r\n                                className=\"closeModal\"\r\n                                onClick={(e) => this.closeViewEventModalButton(e)}>\r\n                                    X\r\n                            </button>\r\n                        <EventView\r\n                            editViewEventModalButton = {this.editViewEventModalButton}\r\n                            removeCalendarEvent = {this.removeCalendarEvent}\r\n                            currentDescription={this.state.currentDescription} \r\n                            currentTitle = {this.state.currentTitle}\r\n                            currentAttendees = {this.state.currentAttendees}\r\n                            currentStart = {this.state.currentStart}\r\n                            currentEnd = {this.state.currentEnd} \r\n                        />\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n        return viewModal\r\n    }\r\n\r\n    editEventModal() {\r\n        let editModal = (\r\n            <div\r\n                className=\"modalBox\"\r\n                style={{display: this.state.editModal}}>\r\n                <div>\r\n                    <form\r\n                        className=\"modalForm\">\r\n                        <button\r\n                            className=\"closeModal\"\r\n                            onClick={(e) => this.closeEditEventModalButton(e)}>\r\n                                X\r\n                        </button>\r\n                        <EditEventView \r\n                            handleChange = {this.handleChange}\r\n                            currentDescription={this.state.currentDescription} \r\n                            currentTitle = {this.state.currentTitle}\r\n                            currentAttendees = {this.state.currentAttendees}\r\n                            currentStart = {this.state.currentStart}\r\n                            currentEnd = {this.state.currentEnd} \r\n                        />\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n        return editModal\r\n    }\r\n\r\n    // Pre-Conditions: CalendarView is loaded\r\n    // Post-Conditions: Displays calendar information\r\n    // contained with event information, will default\r\n    // to current week view\r\n    displayCalendar() {\r\n        let content = (\r\n            <div className=\"calendar\">\r\n            <FullCalendar defaultView=\"dayGridMonth\"\r\n                header={{\r\n                    left: \"prev,next today\",\r\n                    center: \"title\",\r\n                    right: \"dayGridMonth,timeGridWeek,timeGridDay,listWeek\"\r\n                }}\r\n                plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n                ref={this.calendarComponentRef}\r\n                weekends={this.state.calendarWeekends}\r\n                events={this.state.calendarEvents}\r\n                dateClick={this.handleDateClick}\r\n                eventClick={this.handleEventClick}\r\n            />\r\n        </div>\r\n        )\r\n        return content\r\n    }\r\n\r\n    render() {\r\n        const addEventModalForm = this.addEventModalForm()\r\n        const calendar = this.displayCalendar()\r\n\r\n        let viewModal = null\r\n\r\n        if (this.state.editModal === \"none\" || !this.state.editModal) {\r\n            viewModal = this.viewEventModal()\r\n        } else {\r\n            viewModal = this.editEventModal()\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"calendarButtons\">\r\n                    <button\r\n                        className=\"addItemButton\"\r\n                        onClick={(e) => this.addEventModalButton(e)}>\r\n                        <span>&#43;</span> Add Event\r\n                    </button>\r\n                </div>\r\n                <div>\r\n                    {calendar}\r\n                </div>\r\n                <div>\r\n                    {addEventModalForm}\r\n                    {viewModal}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import { sendEvent, updateEvent, storeEvent, removeEvent } from './FirebaseController.js'\r\n\r\n// Pre-Conditions: Information must have been requested\r\n// from a controller and information must be in object form\r\n// Post-Conditions: Succesfully retrives event and\r\n// stores it in the state\r\nexport function retrieveEvent(id) {\r\n    // let eventObject = (event)\r\n\r\n    let info = sendEvent(\"events/\" + id)\r\n\r\n    return info\r\n}\r\n\r\n// Pre-Conditions: Edit button must\r\n// be clicked on for an existing event\r\n// Post-Conditions: Displays any changes made\r\n// to event \r\nexport function editEvent(event, id) {\r\n    let eventObject = (event)\r\n\r\n    updateEvent(eventObject, \"events/\" + id)\r\n}\r\n\r\n// Pre-Conditions: Required information must be\r\n// be filled before creating event\r\n// Post-Conditions: Succesfully creates an event\r\n// with inputted information and sends information\r\n// to Firebase controller\r\nexport function createEvent(event, id) {\r\n    let eventObject = (event)\r\n\r\n    storeEvent(eventObject, \"events/\" + id)\r\n}\r\n\r\n// Pre-Conditions: Delete button must\r\n// be clicked\r\n// Post-Conditions: Succesfully sends information\r\n// to remove from Firebase and to CalendarView\r\nexport function deleteEvent(array, event, id) {\r\n    let eventObject = (event)\r\n\r\n    if (array.length <= 1) {\r\n        array = []\r\n    } else {\r\n        var index\r\n        for (let i = 0; i <= array.length - 1; i++) {\r\n            if (array[i].id.toString() === event.toString()) {\r\n                // console.log(\"fOUND Ya\")\r\n                // console.log(i)\r\n                index = i\r\n            }\r\n        }\r\n        array.splice(index, 1)\r\n    }\r\n\r\n    // console.log(deleteArray)\r\n    // removeEvent(eventObject, \"events/\" + id)\r\n    // let object = {\r\n    //     array\r\n    // }\r\n    return array\r\n}","import React, { Component } from 'react';\r\nimport { Route, Switch, Redirect, BrowserRouter, NavLink} from 'react-router-dom';\r\n\r\nimport CalendarView from './CalendarView';\r\n\r\nexport default class HeaderView extends Component {\r\n    // Pre-Conditions: HeaderView is loaded\r\n    // Post-Conditions: Displays DailyGrind branding information\r\n    displayLogo() {\r\n    }\r\n\r\n    // Pre-Conditions: HeaderView is loaded\r\n    // Post-Conditions: Displays navbar\r\n    displayNavbar() {\r\n    }\r\n\r\n    render() {\r\n        let links = null;\r\n\r\n        if(!this.props.user){\r\n            links = (\r\n                <ul>\r\n                    <li><NavLink to='/signin'>Sign-In</NavLink></li>\r\n                    <li><NavLink to='/settings'>Settings</NavLink></li>\r\n                    <li><NavLink to='alerts'>Alerts</NavLink></li>\r\n                    <li><NavLink to='todo'>To-Do</NavLink></li>\r\n                    <li><NavLink to='/prework'>Pre-Work</NavLink></li>\r\n                    <li><NavLink to='breaks'>Breaks</NavLink></li>\r\n                    <li><NavLink to=\"/calendar\">Calendar</NavLink></li>\r\n                </ul>\r\n            )\r\n        } else {\r\n            links = (\r\n                <ul>\r\n                    <li><button>Sign Out</button></li>\r\n                    <li><NavLink to='/profile'>Profile</NavLink></li>\r\n                    <li><NavLink to='/settings'>Settings</NavLink></li>\r\n                    <li><NavLink to='alerts'>Alerts</NavLink></li>\r\n                    <li><NavLink to='todo'>To-Do</NavLink></li>\r\n                    <li><NavLink to='/prework'>Pre-Work</NavLink></li>\r\n                    <li><NavLink to='breaks'>Breaks</NavLink></li>\r\n                    <li><NavLink to='/calendar'>Calendar</NavLink></li>\r\n                </ul>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className=\"navBar\">  \r\n                {/* <BrowserRouter> */}\r\n                    <p className=\"logo\"><NavLink to='/'>Daily Grind</NavLink></p> \r\n                    {links}\r\n                {/* </BrowserRouter> */}\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class FooterView extends Component {\r\n    // Pre-Conditions: FooterView is loaded\r\n    // Post-Conditions: Displays contact information of team\r\n    displayFooter() {\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>  \r\n                <p>Created for INFO 442 Spring 2020</p>    \r\n            </div>\r\n        )\r\n    }\r\n}","import { sendEvent, updateEvent, storeEvent, removeEvent } from './FirebaseController.js'\r\n\r\n// Pre-Conditions: Information must have been \r\n// requested from FirebaseController\r\n// Post-Conditions: Succesfully retrieves event\r\n// and returns a routine item\r\nexport function retrieveRoutineItem(id) {\r\n    let info = sendEvent(\"routine/\" + id)\r\n    return info\r\n}\r\n\r\n// Pre-Conditions: Required information must\r\n// be filled before creating routine item\r\n// Post-Conditions: Succesfully creates\r\n// a routine item and sends information to\r\n// ToDoView, PreWorkView, and FirebaseController\r\nexport function createRoutineItem(event, id) {\r\n    let eventObject = event\r\n    let returnedID = storeEvent(eventObject, \"routine/\" + id)\r\n    return returnedID\r\n}\r\n\r\n// Pre-Conditions: displayEditPreWork must have been called\r\n// Post-Conditions: Sends any changes made to PreWorView\r\n// and ToDoView\r\nexport function editRoutineItem(event) {\r\n    let eventObject = event\r\n    \r\n    // Do anything we need to do to the event here\r\n\r\n    updateEvent(eventObject, \"routine\")\r\n}\r\n\r\n// Pre-Conditions: Delete button for\r\n// routine list item must be clicked.\r\n// Post-Conditions: Successfully sends information\r\n// to remove from Firebase to FirebaseController\r\n// and to ToDoView & PreWorkView\r\nexport function removeRoutineItem(event) {\r\n    let eventObject = event\r\n\r\n    // Do anything we need to do to the event here\r\n\r\n    removeEvent(event, \"routine\")\r\n}","import React, { Component } from 'react';\r\nimport { retrieveRoutineItem, createRoutineItem, editRoutineItem, removeRoutineItem } from '../Controllers/RoutineController'\r\nimport firebase from 'firebase/app';\r\n\r\nexport default class PreWorkView extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            checklistItems: new Map()\r\n            // user: this.props.user.uid\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.retrievePreWorkItems()\r\n    }\r\n\r\n    componentDidUpdate() {\r\n    }\r\n\r\n    // Mount Functions\r\n\r\n    retrievePreWorkItems() {\r\n        let rootPath = firebase.database().ref('routine')\r\n\r\n        rootPath.once('value', (snapshot) => {\r\n            let info = snapshot.val()\r\n            console.log(info)\r\n            if (info) {\r\n                console.log(info[this.props.user.uid])\r\n                // let keys = Object.keys(info)\r\n                let itemMap = new Map()\r\n\r\n                let keys = Object.keys(info[this.props.user.uid])\r\n                \r\n                keys.map((key) => {\r\n                    console.log(key, info[this.props.user.uid][key])\r\n                    itemMap.set(key, info[this.props.user.uid][key])\r\n                })\r\n                this.setState((state) => {\r\n                    state.checklistItems = itemMap\r\n                    return state\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    // Event Handlers\r\n\r\n    addPreWorkItem(e) {\r\n        e.preventDefault()\r\n        let checklistItems = this.state.checklistItems\r\n\r\n        let preWorkItem = {\r\n            name: this.state.preWorkName,\r\n            starred: false\r\n        }\r\n\r\n        let itemID = createRoutineItem(preWorkItem, this.props.user.uid)\r\n\r\n        checklistItems.set(itemID, preWorkItem)\r\n\r\n        this.setState((state) => {\r\n            this.state.checklistItems = checklistItems\r\n            return state\r\n        })\r\n    }\r\n\r\n    openAddItemModal(e) {\r\n        e.preventDefault()\r\n        this.setState((state) => {\r\n            state.addItemModal = \"block\"\r\n            return state\r\n        })\r\n    }\r\n\r\n    openEditItemModal(e) {\r\n        e.preventDefault()\r\n        this.setState((state) => {\r\n            state.editItemModal = \"block\"\r\n            return state\r\n        })\r\n    }\r\n\r\n    closeAddItemModal(e) {\r\n        e.preventDefault()\r\n        this.setState((state) => {\r\n            state.preWorkName = \"\"\r\n            state.addItemModal = \"none\"\r\n            return state\r\n        })\r\n    }\r\n\r\n    // Pre-Conditions: Event must have been sent\r\n    // Post-Conditions: State is updated with event changes\r\n    handleChange = (event) => {\r\n        let field = event.target.name\r\n        let value = event.target.value\r\n\r\n        let changes = {}\r\n\r\n        changes[field] = value\r\n        this.setState(changes)\r\n    }\r\n\r\n    // Display Functions\r\n\r\n    editItemModal() {\r\n        let content = (\r\n            <div className=\"modalBox\"\r\n                style={{display: this.state.editItemModal}}>\r\n                <div>\r\n                    <form className=\"modalForm\">\r\n                        <button\r\n                            onClick={(e) => this.closeEditItemModal(e)}\r\n                            className=\"closeModal\">\r\n                                X\r\n                            </button>\r\n                        <div className=\"modalContent\">\r\n                            <div>\r\n                                <input className=\"modalInput\">\r\n\r\n                                </input>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n        return content\r\n    }\r\n\r\n    addItemModal() {\r\n        let content = (\r\n            <div className=\"modalBox\"\r\n                style={{display: this.state.addItemModal}}>\r\n                <div>\r\n                    <form className=\"modalForm\">\r\n                        <button\r\n                            onClick={(e) => this.closeAddItemModal(e)} \r\n                            className=\"closeModal\">\r\n                            X\r\n                        </button>\r\n                        <div className=\"modalContent\">\r\n                            <div>\r\n                                <input className=\"modalInput\" required\r\n                                    onChange={(e) => this.handleChange(e)}\r\n                                    placeholder=\"PreWork Name\"\r\n                                    type=\"text\"\r\n                                    name=\"preWorkName\"\r\n                                />\r\n                            </div>\r\n                            <button\r\n                                onClick={(e) => this.addPreWorkItem(e)}>\r\n                                Add\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n        return content\r\n    }\r\n\r\n    renderPreWorkList() {\r\n        const list = Array.from(this.state.checklistItems.entries()).map((key) => {\r\n            return <PreworkItem\r\n                id={key[0]}\r\n                name={key[1].name}\r\n                starred={key[1].starred}/>\r\n        })\r\n        return list\r\n    }\r\n\r\n    // Pre-Conditions: PreWorkView is loaded\r\n    // Post-Conditions: Displays pre-work routine\r\n    displayPreWork() {\r\n        const checklistItems = this.renderPreWorkList()\r\n\r\n        let content = (\r\n            <div>\r\n                <div>\r\n                    <div className=\"preWorkTitleElements\">\r\n                        <div>\r\n                        <h2>\r\n                            Pre-Work Items\r\n                        </h2>\r\n                        </div>\r\n                        <div>\r\n                        {/* <button className=\"addItemButton\"\r\n                            onClick={(e) => this.openAddItemModal(e)}>\r\n                            <span>&#43;</span> Add Item\r\n                        </button> */}\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div>\r\n                        <ul className=\"listGroup\">\r\n                            {checklistItems}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n        return content\r\n    }\r\n\r\n    // Pre-Conditions: User has clicked \"edit\" button\r\n    // Post-Conditions: Display edit pop-up & send \r\n    // filled in information Routine Controller\r\n    displayEditPreWork() {\r\n\r\n    }\r\n\r\n    render() {\r\n        let displayPreWork = this.displayPreWork()\r\n        let addItemModal = this.addItemModal()\r\n\r\n        return (\r\n            <div className=\"preWorkView\">\r\n                <div>\r\n                    {displayPreWork}\r\n                </div>\r\n                <div>\r\n                    {addItemModal}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass PreworkItem extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        let starred = this.props.starred ? \r\n        <button \r\n            // onClick={(e) => this.}\r\n            className=\"starButton\"><span>&#9733;</span></button> : <button className=\"starButton\"><span>&#9734;</span></button>\r\n\r\n        return (\r\n            <div>\r\n                <li className=\"listpreWork\">{starred}<button className=\"listButton\">{this.props.name}</button></li>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport PreWorkView from './PreWorkView';\r\n\r\n\r\nexport default class WelcomeView extends Component {\r\n\r\n    // Pre-Conditions: WelcomeView is loaded\r\n    // Post-Conditions: Displays current date and day of the week\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          date: new Date().toDateString()\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.intervalID = setInterval(\r\n            () => this.tick(),\r\n            1000\r\n        );  \r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.intervalID);\r\n    }\r\n\r\n    tick() {\r\n        var now = new Date();\r\n        var hour = now.getHours();\r\n        var minute = now.getMinutes();\r\n        var ampm = hour >= 12 ? 'PM' : 'AM';\r\n        hour = hour % 12;\r\n        hour = hour ? hour : 12; // the hour '0' should be '12'\r\n        minute = minute < 10 ? '0'+minute : minute;\r\n        this.setState({\r\n            time: hour + \":\" + minute + \" \" + ampm \r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"welcome\">\r\n                <div className=\"welcomeText\">\r\n                    <h2>Today is</h2>\r\n                    <h1>\r\n                        {this.state.date}\r\n                    </h1>\r\n                    <h2>{this.state.time}</h2>\r\n                </div>\r\n                <div className=\"preWorkView\">\r\n                    <PreWorkView\r\n                        {...this.props}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport default class ProfileView extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    \r\n    handleChangeJT(event) {\r\n        this.setState({jobTitle: event.target.jobTitle});\r\n    }\r\n\r\n    handleSubmitJT(event) {\r\n        event.preventDefault();\r\n        this.handleChange(this.state.jobTitle);\r\n    }\r\n\r\n    handleChangeS(event) {\r\n        this.setState({status: event.target.status});\r\n    }\r\n\r\n    handleSubmitS(event) {\r\n        event.preventDefault();\r\n        this.handleChange(this.state.status);\r\n    }\r\n\r\n    handleChangeBio(event) {\r\n        this.setState({bio: event.target.bio});\r\n    }\r\n\r\n    handleSubmitBio(event) {\r\n        event.preventDefault();\r\n        this.handleChange(this.state.bio);\r\n    }\r\n\r\n    handleChangeOH(event) {\r\n        this.setState({officeHours: event.target.officeHours});\r\n    }\r\n\r\n    handleSubmitOH(event) {\r\n        event.preventDefault();\r\n        this.handleChange(this.state.officeHours);\r\n    }\r\n\r\n    displayPreferredContacts(contact) {\r\n        return (\r\n            <div>\r\n                <table>\r\n                <tr>\r\n                        <td rowspan=\"2\"><img src={contact.profilePhoto} alt=\"User's Profile Photo\" /></td>\r\n                        <td>{contact.name}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>{contact.organization}</td>\r\n                    </tr>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    // Dialogue to add users to preferred contacts\r\n    addToContacts() {\r\n\r\n    }\r\n    \r\n    // Pre-Conditions: ProfileView is loaded, user is logged in.\r\n    // Post-Conditions: Displays user's profile\r\n    displayProfile() {\r\n        let profile = null;\r\n        let profileReq = (\r\n            <div>\r\n                <table className=\"profile\">\r\n                    <tr>\r\n                        <td rowspan=\"2\"><img src={this.props.user.profilePhoto} alt=\"User's Profile Photo\" /></td>\r\n                        <td>{this.props.user.name}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>{this.props.user.organization}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>{this.props.user.theme}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td colspan=\"2\" style=\"text-allign: right\"><span className=\"input-group-btn\">\r\n                            <Link to=\"/settings\">Edit</Link>\r\n                        </span></td>\r\n                    </tr>\r\n                </table>\r\n            </div>\r\n        )\r\n        let profileOptional = null;\r\n        //Displaying job title\r\n        if(this.props.user.jobTitle){\r\n            profileOptional = (\r\n                <div>\r\n                    <p>Job title: {this.props.user.jobTitle}</p>\r\n                </div>\r\n            )\r\n        } else {\r\n            profileOptional = (\r\n                <div>\r\n                    <form onSubmit={this.handleSubmitJT}>\r\n                        <div>\r\n                            <label>\r\n                                Job title:\r\n                                <input type=\"text\" onChange={this.handleChangeJT}/>\r\n                            </label>\r\n                            <input type=\"submit\" value=\"Submit\" />\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            )\r\n        }\r\n        //Displaying user's status\r\n        if(this.props.user.status){\r\n            profileOptional = (\r\n                <div>\r\n                    <p>Status: {this.props.user.status}</p>\r\n                </div>\r\n            )\r\n        } else {\r\n            profileOptional = (\r\n                <div>\r\n                    <form onSubmit={this.handleSubmitS}>\r\n                        <div>\r\n                            <label>\r\n                                Status:\r\n                                <input type=\"text\" onChange={this.handleChangeS}/>\r\n                            </label>\r\n                            <input type=\"submit\" value=\"Submit\" />\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            )\r\n        }\r\n        //Displaying user's bio\r\n        if(this.props.user.bio){\r\n            profileOptional = (\r\n                <div>\r\n                    <p>Status: {this.props.user.bio}</p>\r\n                </div>\r\n            )\r\n        } else {\r\n            profileOptional = (\r\n                <div>\r\n                    <form onSubmit={this.handleSubmitBio}>\r\n                        <div>\r\n                            <label>\r\n                                Bio:\r\n                                <input type=\"text\" onChange={this.handleChangeBio}/>\r\n                            </label>\r\n                            <input type=\"submit\" value=\"Submit\" />\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            )\r\n        }\r\n        //Displaying user's office hours\r\n        if(this.props.user.status){\r\n            profileOptional = (\r\n                <div>\r\n                    <p>Office Hours: {this.props.user.officeHours}</p>\r\n                </div>\r\n            )\r\n        } else {\r\n            profileOptional = (\r\n                <div>\r\n                    <form onSubmit={this.handleSubmitOH}>\r\n                        <div>\r\n                            <label>\r\n                                Office Hours:\r\n                                <input type=\"text\" onChange={this.handleChangeOH}/>\r\n                            </label>\r\n                            <input type=\"submit\" value=\"Submit\" />\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            )\r\n        }\r\n        //Preferred Contacts List (still needs to be done)\r\n        let preferredContacts = (\r\n            <div>\r\n                <h1>Preferred Contacts</h1>\r\n            </div>\r\n        );\r\n        let contactList = this.props.user.preferredContacts;\r\n        for(let i = 0; i < contactList.length; i++) {\r\n            preferredContacts += this.displayPreferredContacts(contactList[i]);\r\n        }\r\n        preferredContacts += (<button onClick={this.addToContacts}>Add contacts</button>)\r\n        profile = (\r\n            <div>\r\n                <div>{profileReq}</div>\r\n                <div>\r\n                    {profileOptional}\r\n                    {preferredContacts}\r\n                </div>\r\n            </div>\r\n        )\r\n        return profile;\r\n    }\r\n\r\n    // Pre-Conditions: Part of profile has been changed\r\n    // Required: Item that has been changed\r\n    // Post-Conditions: Changes content of item & saves to profile\r\n    // This should be where changes to the optional profile fields will\r\n    // sent to the Firebase database since Profile does not have\r\n    // a Controller.\r\n    handleChange(profileItem) {\r\n    }\r\n\r\n    render() {\r\n        let displayProfile = this.displayProfile()\r\n\r\n        if(!this.props.user){\r\n            return (\r\n                <div>\r\n                    <p>Please log-in or sign-up in order to access your profile.</p>\r\n                </div>\r\n            )\r\n        } else {\r\n            return {displayProfile};\r\n        }\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class AlertView extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    \r\n    // Pre-Conditions: AlertView is loaded, and the array of alerts is listed\r\n    // in reverse chronological order\r\n    // Post-Conditions: Returns single unread alert\r\n    displayUnreadAlerts(alert) {\r\n        let unreadAlert = (\r\n            <div className=\"unread\">\r\n                <h2 className=\"unread\">{alert.title}</h2>\r\n                <h6 className=\"unread\">{alert.date.toDateString()} at {alert.time}</h6>\r\n                <p className=\"unread\">{alert.description}</p>\r\n                <button onClick={this.handleReadAlert} id=\"unread\">Mark as Read</button>\r\n                <button onClick={this.handleDelete} className=\"delete\">Delete</button>\r\n            </div>\r\n        )\r\n        return unreadAlert;\r\n    }\r\n\r\n    // Pre-Conditions: AlertView is loaded, and the array of alerts is listed\r\n    // in reverse chronological order\r\n    // Post-Conditions: Returns single read alert\r\n    displayReadAlerts(alert) {\r\n        let readAlert = (\r\n            <div className=\"read\">\r\n                <h2 className=\"read\">{alert.title}</h2>\r\n                <h6 className=\"read\">{alert.date.toDateString()} at {alert.time}</h6>\r\n                <p className=\"read\">{alert.description}</p>\r\n                <button onClick={this.handleDelete} className=\"delete\">Delete</button>\r\n            </div>\r\n        )\r\n        return readAlert;\r\n    }\r\n\r\n    // Pre-Conditions: Alert has been marked as read\r\n    // Required: Alert that has been marked as read\r\n    // Post-Conditions: Changes status & styling of alert\r\n    handleReadAlert(alert) {\r\n    }\r\n\r\n    handleDelete(alert) {\r\n\r\n    }\r\n\r\n    render() {\r\n        let alerts = null;\r\n        // let alertsList = this.props.user.alerts;\r\n        // // How should we go about moving \"critical\" alerts to the front of the list?\r\n        // for(let i = 0; i < alertsList.length; i++) {\r\n        //     if(alertsList[i].status == 'read') {\r\n        //         alerts += this.displayReadAlerts(alertsList[i]);\r\n        //     } else {\r\n        //         alerts += this.displayUnreadAlerts(alertsList[i]);\r\n        //     }\r\n        // }\r\n        return (\r\n            <div>\r\n                {alerts}      \r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { signIn, signUp } from '../Controllers/SignUpController.js'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport default class SignInView extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    handleSignIn = (event) => {\r\n        event.preventDefault()\r\n        \r\n    }\r\n\r\n    // Pre-Conditions: Event must have been sent\r\n    // Post-Conditions: State is updated with event changes\r\n    handleChange = (event) => {\r\n        let field = event.target.name\r\n        let value = event.target.value\r\n\r\n        let changes = {}\r\n\r\n        changes[field] = value\r\n        this.setState(changes)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form className=\"signInForm\">\r\n                    <div>\r\n                        <div>\r\n                            <label>Email</label>\r\n                        </div>\r\n                        <div>\r\n                            <input type=\"email\" name=\"email\" onChange={(e) => this.handleChange(e)}/>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <div>\r\n                            <label>Password</label>\r\n                        </div>\r\n                        <div>\r\n                            <input type=\"password\" name=\"password\" onChange={(e) => this.handleChange(e)}/>\r\n                        </div>\r\n                    </div>\r\n                    <button className=\"regButton\">\r\n                        Login\r\n                    </button>\r\n                </form>\r\n                <div>\r\n                    <NavLink id=\"createAccountNav\" to=\"/signup\">Create Account</NavLink>\r\n                    </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport { signUp } from '../Controllers/SignUpController'\r\n\r\nexport default class SignUpView extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    // Pre-Conditions: Event must have been sent\r\n    // Post-Conditions: State is updated with event changes\r\n    handleChange = (event) => {\r\n        let field = event.target.name\r\n        let value = event.target.value\r\n\r\n        let changes = {}\r\n\r\n        changes[field] = value\r\n        this.setState(changes)\r\n    }\r\n\r\n    handleSignUp(e) {\r\n        e.preventDefault()\r\n        if (this.state.email && this.state.password \r\n            && this.state.password === this.state.retypePassword) {\r\n                let user = signUp(this.state.email, this.state.password)\r\n                this.setState(user)\r\n        } else {\r\n            console.log(\"Error creating account\")\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form className=\"signInForm\">\r\n                    <div>\r\n                        <div>\r\n                        <label>Email</label>\r\n                        </div>\r\n                        <div>\r\n                        <input type=\"email\" name=\"email\"\r\n                            onChange={(e) => this.handleChange(e)}/>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <div>\r\n                        <label>Password</label>\r\n                        </div>\r\n                        <div>\r\n                        <input type=\"password\" name=\"password\"\r\n                            onChange={(e) => this.handleChange(e)}/>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <div>\r\n                        <label>Retype Password</label>\r\n                        </div>\r\n                        <div>\r\n                        <input type=\"password\" name=\"retypePassword\"\r\n                            onChange={(e) => this.handleChange(e)}/>\r\n                        </div>\r\n                    </div>\r\n                    <button \r\n                        onClick={(e) => this.handleSignUp(e)}\r\n                        className=\"createAccount\">\r\n                        Create Account\r\n                    </button>\r\n                </form>\r\n                <div>\r\n                    <NavLink id=\"navLinkAccount\" to=\"/signin\">Already Have an Account?</NavLink>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import firebase from 'firebase/app';\r\nimport { storeEvent } from './FirebaseController';\r\n\r\n// Pre-Conditions: User must have entered email & password\r\n// Post-Conditions: Successfully log user into their account, \r\n// send error that login information was incorrect, or that\r\n// information does not match format need\r\nexport function signIn(email, password) {\r\n    firebase.auth().signInWithCredential(email, password)\r\n        .catch((err) => {\r\n            return err.message\r\n        })\r\n}\r\n\r\n\r\n// Pre-Conditions: User must have entered email and password\r\n// Post-Conditions: Successfully creates user account with given\r\n// information or sends error for incomplete form\r\nexport function signUp(email, password) {\r\n    firebase.auth().createUserWithEmailAndPassword(email, password)\r\n        .then(function() {\r\n            var user = firebase.auth().currentUser\r\n\r\n            let userObject = {\r\n                email: user.email,\r\n                uid: user.uid.toString()\r\n            }\r\n\r\n            storeEvent(userObject, \"users/\" + user.uid.toString())\r\n            return userObject\r\n        }).catch((err) => {\r\n            console.log(err.message)\r\n            return err.message\r\n        })\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { retrieveRoutineItem, createRoutineItem, editRoutineItem, removeRoutineItem } from '../Controllers/RoutineController'\r\nimport firebase from 'firebase/app';\r\n\r\nexport default class EditPreWorkView extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            checklistItems: new Map()\r\n            // user: this.props.user.uid\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"Test!\")\r\n        this.retrievePreWorkItems()\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        console.log(this.state)\r\n    }\r\n\r\n    // Mount Functions\r\n\r\n    retrievePreWorkItems() {\r\n        let rootPath = firebase.database().ref('routine')\r\n\r\n        rootPath.once('value', (snapshot) => {\r\n            let info = snapshot.val()\r\n            console.log(info)\r\n            if (info) {\r\n                console.log(info[this.props.user.uid])\r\n                // let keys = Object.keys(info)\r\n                let itemMap = new Map()\r\n\r\n                let keys = Object.keys(info[this.props.user.uid])\r\n                \r\n                keys.map((key) => {\r\n                    console.log(key, info[this.props.user.uid][key])\r\n                    itemMap.set(key, info[this.props.user.uid][key])\r\n                })\r\n                this.setState((state) => {\r\n                    state.checklistItems = itemMap\r\n                    return state\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    // Event Handlers\r\n\r\n    addPreWorkItem(e) {\r\n        e.preventDefault()\r\n        let checklistItems = this.state.checklistItems\r\n\r\n        let preWorkItem = {\r\n            name: this.state.preWorkName,\r\n            starred: false\r\n        }\r\n\r\n        let itemID = createRoutineItem(preWorkItem, this.props.user.uid)\r\n\r\n        checklistItems.set(itemID, preWorkItem)\r\n\r\n        this.setState((state) => {\r\n            this.state.checklistItems = checklistItems\r\n            return state\r\n        })\r\n    }\r\n\r\n    openAddItemModal(e) {\r\n        e.preventDefault()\r\n        this.setState((state) => {\r\n            state.addItemModal = \"block\"\r\n            return state\r\n        })\r\n    }\r\n\r\n    openEditItemModal(e) {\r\n        e.preventDefault()\r\n        this.setState((state) => {\r\n            state.editItemModal = \"block\"\r\n            return state\r\n        })\r\n    }\r\n\r\n    closeAddItemModal(e) {\r\n        e.preventDefault()\r\n        this.setState((state) => {\r\n            state.preWorkName = \"\"\r\n            state.addItemModal = \"none\"\r\n            return state\r\n        })\r\n    }\r\n\r\n    // Pre-Conditions: Event must have been sent\r\n    // Post-Conditions: State is updated with event changes\r\n    handleChange = (event) => {\r\n        let field = event.target.name\r\n        let value = event.target.value\r\n\r\n        let changes = {}\r\n\r\n        changes[field] = value\r\n        this.setState(changes)\r\n    }\r\n\r\n    // Display Functions\r\n\r\n    editItemModal() {\r\n        let content = (\r\n            <div className=\"modalBox\"\r\n                style={{display: this.state.editItemModal}}>\r\n                <div>\r\n                    <form className=\"modalForm\">\r\n                        <button\r\n                            onClick={(e) => this.closeEditItemModal(e)}\r\n                            className=\"closeModal\">\r\n                                X\r\n                            </button>\r\n                        <div className=\"modalContent\">\r\n                            <div>\r\n                                <input className=\"modalInput\">\r\n\r\n                                </input>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n        return content\r\n    }\r\n\r\n    addItemModal() {\r\n        let content = (\r\n            <div className=\"modalBox\"\r\n                style={{display: this.state.addItemModal}}>\r\n                <div>\r\n                    <form className=\"modalForm\">\r\n                        <button\r\n                            onClick={(e) => this.closeAddItemModal(e)} \r\n                            className=\"closeModal\">\r\n                            X\r\n                        </button>\r\n                        <div className=\"modalContent\">\r\n                            <div>\r\n                                <input className=\"modalInput\" required\r\n                                    onChange={(e) => this.handleChange(e)}\r\n                                    placeholder=\"PreWork Name\"\r\n                                    type=\"text\"\r\n                                    name=\"preWorkName\"\r\n                                />\r\n                            </div>\r\n                            <button\r\n                                onClick={(e) => this.addPreWorkItem(e)}>\r\n                                Add\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n        return content\r\n    }\r\n\r\n    renderPreWorkList() {\r\n        const list = Array.from(this.state.checklistItems.entries()).map((key) => {\r\n            console.log(key)\r\n            return <PreworkItem\r\n                id={key[0]}\r\n                name={key[1].name}\r\n                starred={key[1].starred}/>\r\n        })\r\n        return list\r\n    }\r\n\r\n    // Pre-Conditions: PreWorkView is loaded\r\n    // Post-Conditions: Displays pre-work routine\r\n    displayPreWork() {\r\n        const checklistItems = this.renderPreWorkList()\r\n\r\n        let content = (\r\n            <div>\r\n                <div>\r\n                    <div className=\"preWorkTitleElements\">\r\n                        <div>\r\n                        <h2>\r\n                            Pre-Work Items\r\n                        </h2>\r\n                        </div>\r\n                        <div>\r\n                        <button className=\"addItemButton\"\r\n                            onClick={(e) => this.openAddItemModal(e)}>\r\n                            <span>&#43;</span> Add Item\r\n                        </button>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div>\r\n                        <ul className=\"listGroup\">\r\n                            {checklistItems}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n        return content\r\n    }\r\n\r\n    // Pre-Conditions: User has clicked \"edit\" button\r\n    // Post-Conditions: Display edit pop-up & send \r\n    // filled in information Routine Controller\r\n    displayEditPreWork() {\r\n\r\n    }\r\n\r\n    render() {\r\n        let displayPreWork = this.displayPreWork()\r\n        let addItemModal = this.addItemModal()\r\n\r\n        return (\r\n            <div className=\"editPreWorkView\">\r\n                <div>\r\n                    {displayPreWork}\r\n                </div>\r\n                <div>\r\n                    {addItemModal}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nclass PreworkItem extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <li className=\"listpreWork\"><button className=\"listButton\">{this.props.name}</button></li>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Route, Switch, Redirect, BrowserRouter, withRouter } from 'react-router-dom';\r\nimport './App.css';\r\n\r\nimport firebase from 'firebase/app';\r\n\r\nimport HeaderView from './Views/HeaderView';\r\nimport FooterView from './Views/FooterView';\r\nimport WelcomeView from './Views/WelcomeView';\r\nimport CalendarView from './Views/CalendarView';\r\nimport ProfileView from './Views/ProfileView';\r\nimport AlertView from './Views/AlertView';\r\nimport SignInView from './Views/SignInView';\r\nimport SignUpView from './Views/SignUpView';\r\nimport EditPreWorkView from './Views/EditPreWorkView';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      user: null\r\n    };\r\n  }\r\n\r\n  // uncomment when firebase is set up to adjust state based on sign in/out \r\n  // componentDidMount(){\r\n  //   this.unregFunction = firebase.auth().onAuthStateChanged((curUser) => {\r\n  //     if (curUser) {\r\n  //       this.setState({\r\n  //         user: curUser.displayName\r\n  //       })\r\n  //     } else {\r\n  //       this.setState({\r\n  //         user: null\r\n  //       })\r\n  //     }\r\n  //   })\r\n  // }\r\n\r\n  componentDidMount() {\r\n    this.authUnSubFunction = firebase.auth().onAuthStateChanged((firebaseUser) => {\r\n      if (firebaseUser) { // If user is logged in\r\n        this.setState({\r\n          user: firebaseUser\r\n        })\r\n      } else { // Log user out\r\n        this.setState({\r\n          user: null\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.authUnSubFunction(); // Stops listening for auth changes\r\n  }\r\n\r\n  render() {\r\n    let content = null;\r\n\r\n    content = (\r\n      <Switch>\r\n        <Route exact path=\"/\" render={() => <WelcomeView\r\n          {...this.state}/>}/>\r\n        <Route path=\"/calendar\" render={() => <CalendarView \r\n          {...this.state}/>} />\r\n        <Route path=\"/profile\" component={ProfileView} />\r\n        <Route path=\"/alerts\" component={AlertView} />\r\n        <Route path=\"/signin\" component={SignInView} />\r\n        <Route path=\"/prework\" render={() => <EditPreWorkView\r\n          {...this.state}\r\n          currentUser={this.state.user}/>}\r\n        />\r\n        <Route path=\"/signup\" render={() =>\r\n          <SignUpView\r\n            {...this.state}/>} />\r\n        {/*\r\n          Add more routes as views get made using react-router-dom \r\n          eg: <Route path='/calendar' component={CalendarView}/>  */}\r\n      </Switch>\r\n    )\r\n\r\n    return (\r\n      <div className=\"DailyGrind\">\r\n        <header className=\"header\">\r\n          <HeaderView user={this.state.user}></HeaderView>\r\n        </header>\r\n\r\n        <main>\r\n          {content}\r\n        </main>\r\n\r\n        <footer className=\"footer\">\r\n          <FooterView></FooterView>\r\n        </footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter } from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/database';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nlet config = {\r\n  apiKey: \"AIzaSyBo_JJSCm3s7IVHAoMuh5WnjuEhny4HqZY\",\r\n  authDomain: \"info442-s20-dailygrind.firebaseapp.com\",\r\n  databaseURL: \"https://info442-s20-dailygrind.firebaseio.com\",\r\n  projectId: \"info442-s20-dailygrind\",\r\n  storageBucket: \"info442-s20-dailygrind.appspot.com\",\r\n  messagingSenderId: \"550288362845\",\r\n  appId: \"1:550288362845:web:ee14e06dccc6b03d526cb4\",\r\n  measurementId: \"G-G09PD0YC5K\"\r\n}\r\n\r\nfirebase.initializeApp(config);\r\n\r\nReactDOM.render(\r\n  <BrowserRouter><App /></BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}